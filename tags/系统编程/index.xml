<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>系统编程 - Tag  Kyden&#39;s 博客</title>
    <link>http://kyden.us.kg/tags/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/</link>
    <description>Kyden&#39;s Blog Site</description>
    <generator>Hugo 0.145.0 &amp; FixIt v0.3.16</generator>
    <language>en</language>
    <managingEditor>kytedance@gmail.com (kyden)</managingEditor>
    <webMaster>kytedance@gmail.com (kyden)</webMaster>
    <lastBuildDate>Wed, 15 May 2024 13:41:49 +0800</lastBuildDate>
    <atom:link href="http://kyden.us.kg/tags/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>图解 Go 调度器：GMP 模型深度剖析</title>
      <link>http://kyden.us.kg/posts/golang-gmp/</link>
      <pubDate>Wed, 15 May 2024 13:41:49 +0800</pubDate><author>kytedance@gmail.com (kyden)</author>
      <guid>http://kyden.us.kg/posts/golang-gmp/</guid>
      <category domain="http://kyden.us.kg/categories/go%E8%AF%AD%E8%A8%80/">Go语言</category>
      <category domain="http://kyden.us.kg/categories/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/">系统编程</category>
      <category domain="http://kyden.us.kg/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">并发编程</category>
      <category domain="http://kyden.us.kg/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">性能优化</category>
      <category domain="http://kyden.us.kg/categories/%E7%BC%96%E7%A8%8B%E5%8E%9F%E7%90%86/">编程原理</category>
      <description>&lt;div class=&#34;details admonition abstract open&#34;&gt;&#xA;  &lt;div class=&#34;details-summary admonition-title&#34;&gt;&lt;i class=&#34;icon fa-fw fa-solid fa-clipboard-list&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;导语&lt;i class=&#34;details-icon fa-solid fa-angle-right fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;details-content&#34;&gt;&#xA;    &lt;div class=&#34;admonition-content&#34;&gt;Go 语言因其强大的并发特性而备受欢迎，而这一切的基础都在于其独特的 GMP 调度模型。本文将带你揭开 Go 调度器的神秘面纱，从操作系统的进程、线程概念开始，一步步深入理解 Goroutine 的工作原理。通过图解和源码分析，让你真正理解 Go 是如何实现高效的并发调度，以及为什么 Go 的并发编程如此简单优雅。无论你是 Go 开发新手还是经验丰富的工程师，这篇文章都能帮你更深入地理解 Go 的并发机制。&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>揭秘 Go 网络轮询器：从 epoll 到 netpoll 的架构实现</title>
      <link>http://kyden.us.kg/posts/golang-netpoll/</link>
      <pubDate>Wed, 08 May 2024 11:43:38 +0800</pubDate><author>kytedance@gmail.com (kyden)</author>
      <guid>http://kyden.us.kg/posts/golang-netpoll/</guid>
      <category domain="http://kyden.us.kg/categories/go%E8%AF%AD%E8%A8%80/">Go语言</category>
      <category domain="http://kyden.us.kg/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/">网络编程</category>
      <category domain="http://kyden.us.kg/categories/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/">系统编程</category>
      <category domain="http://kyden.us.kg/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">性能优化</category>
      <category domain="http://kyden.us.kg/categories/%E7%BC%96%E7%A8%8B%E5%8E%9F%E7%90%86/">编程原理</category>
      <description>&lt;div class=&#34;details admonition abstract open&#34;&gt;&#xA;  &lt;div class=&#34;details-summary admonition-title&#34;&gt;&lt;i class=&#34;icon fa-fw fa-solid fa-clipboard-list&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;导语&lt;i class=&#34;details-icon fa-solid fa-angle-right fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;details-content&#34;&gt;&#xA;    &lt;div class=&#34;admonition-content&#34;&gt;Go 语言的高性能网络编程背后，隐藏着一个精心设计的网络轮询器。它巧妙地将 Linux epoll 的高效事件通知机制与 Go runtime 的 goroutine 调度系统完美结合，成就了 Go 简单优雅却高效强大的网络编程模型。本文将带你深入探索这个神奇的系统，从底层的 epoll 实现到上层的 goroutine 调度，全方位解析 Go 网络轮询器的工作原理。无论你是想深入理解 Go 的并发机制，还是追求网络应用的极致性能，这都是一篇不容错过的技术探索。&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Stack - Tag - KyteDance-鸢舞</title>
        <link>https://kydance.github.io/tags/stack/</link>
        <description>Stack - Tag - KyteDance-鸢舞</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>kytedance@gmail.com (kyden)</managingEditor>
            <webMaster>kytedance@gmail.com (kyden)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 19 May 2024 22:47:26 &#43;0800</lastBuildDate><atom:link href="https://kydance.github.io/tags/stack/" rel="self" type="application/rss+xml" /><item>
    <title>深入探讨 Golang Escape Analysis</title>
    <link>https://kydance.github.io/posts/golang-escape-analysis/</link>
    <pubDate>Sun, 19 May 2024 22:47:26 &#43;0800</pubDate>
    <author>kyden</author>
    <guid>https://kydance.github.io/posts/golang-escape-analysis/</guid>
    <description><![CDATA[<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw" aria-hidden="true"></i>导语<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><strong>深入理解 Golang Escape Analysis：变量何时逃逸？</strong></div>
        </div>
    </div>
<h2 id="i-golang-escape-ananlysis">I. Golang Escape Ananlysis</h2>
<p>Golang 编译器会自动决定把一个变量放在堆栈还是栈上，即逃逸分析（Escape Analysis）.</p>
<p>Go 声称逃逸分析可以释放程序员关于内存的使用限制，更多地关注程序逻辑本身。</p>
<hr>
<h2 id="ii-逃逸规则">II. 逃逸规则</h2>
<p>众所周知，当变量需要使用堆（heap）空间时，那么变量就应该进行逃逸。</p>
<p>一般情况下，一个引用对象中的引用类成员进行赋值，可能出现逃逸现象：可以理解为访问一个引用对象实际上底层就是通过一个指针来间接的访问，但如果再访问里面的引用成员就会有第二次间接访问，这样操作这部分对象的话，极大可能会出现逃逸的现象。</p>
<p>Golang 中的引用类型有函数类型 <code>func()</code>，接口类型 <code>interface</code>，切片类型 <code>slice</code>，字典类型 map，管道类型 <code>channel</code>，指针类型 <code>*</code> 等。</p>
<h3 id="逃逸场景i-interface">逃逸场景I： <code>[]interface{}</code></h3>
<p><strong>使用 <code>[]</code> 赋值 <code>[]interface{}</code> 数据类型，必定逃逸</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:8:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:6:23: <span class="o">[]</span>interface <span class="o">{}{</span>...<span class="o">}</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:6:24: <span class="m">1</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:6:27: <span class="m">2</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:8:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:9:12: <span class="m">3</span> escapes to heap
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景ii-mapstringinterface">逃逸场景II： <code>map[string]interface{}</code></h3>
<p><strong>使用 <code>[]</code> 赋值 <code>map[string]interface{}</code> 数据类型，必定逃逸</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;Kyden&#39;s Blog&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:9:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:6:13: make<span class="o">(</span>map<span class="o">[</span>string<span class="o">]</span>interface <span class="o">{})</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:7:20: <span class="s2">&#34;Kyden&#39;s Blog&#34;</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:9:12: ... argument does not escape
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景-iii-mapinterfaceinterface">逃逸场景 III： <code>map[interface{}]interface{}</code></h3>
<p><strong>使用 <code>[]</code> 赋值 <code>map[interface{}]interface{}</code> 数据类型，必定逃逸</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;Kyden&#39;s Blog&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:11:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:8:13: make<span class="o">(</span>map<span class="o">[</span>interface <span class="o">{}]</span>interface <span class="o">{})</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:9:6: <span class="s2">&#34;BlogName&#34;</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:9:20: <span class="s2">&#34;Kyden&#39;s Blog&#34;</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:10:13: <span class="s2">&#34;BlogName&#34;</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:11:12: ... argument does not escape
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景-ivmapstringstring">逃逸场景 IV：<code>map[string][]string</code></h3>
<p><code>map[string][]string</code> 数据类型，赋值会发生 <code>[]string</code> 逃逸</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;Kyden&#39;s Blog&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:11:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:8:13: make<span class="o">(</span>map<span class="o">[</span>string<span class="o">][]</span>string<span class="o">)</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:9:28: <span class="o">[]</span>string<span class="o">{</span>...<span class="o">}</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:11:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:11:21: val escapes to heap
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景-vint">逃逸场景 V：<code>[]*int</code></h3>
<p><code>[]*int</code> 数据类型，赋值的右值会发生逃逸</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span> <span class="o">:=</span> <span class="p">[]</span><span class="o">*</span><span class="kt">int</span><span class="p">{</span><span class="kc">nil</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span> <span class="o">:=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\r\n&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\r\n&#34;</span><span class="p">,</span> <span class="nx">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:9:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:10:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:7:2: moved to heap: a
</span></span><span class="line"><span class="cl">./main.go:6:15: <span class="o">[]</span>*int<span class="o">{</span>...<span class="o">}</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:9:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:9:23: *dat<span class="o">[</span>0<span class="o">]</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:10:12: ... argument does not escape
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景-vifuncint">逃逸场景 VI：<code>func(*int)</code></h3>
<p><code>func(*int)</code> 数据类型，进行函数赋值，会使传递的形参逃逸</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">(</span><span class="nx">a</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span> <span class="o">:=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fn</span> <span class="o">:=</span> <span class="nx">f</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;a = %v\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:6:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:14:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:5:8: a does not escape
</span></span><span class="line"><span class="cl">./main.go:6:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:6:21: *a escapes to heap
</span></span><span class="line"><span class="cl">./main.go:14:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:14:25: a escapes to heap
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
</channel>
</rss>

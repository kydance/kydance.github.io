<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Stardard - Tag - KyteDance-鸢舞</title>
        <link>https://kydance.github.io/tags/stardard/</link>
        <description>Stardard - Tag - KyteDance-鸢舞</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>kytedance@gmail.com (kyden)</managingEditor>
            <webMaster>kytedance@gmail.com (kyden)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 13 Jul 2024 21:04:57 &#43;0800</lastBuildDate><atom:link href="https://kydance.github.io/tags/stardard/" rel="self" type="application/rss+xml" /><item>
    <title>Golang Project Stardard Layout</title>
    <link>https://kydance.github.io/posts/golang-project-layout/</link>
    <pubDate>Sat, 13 Jul 2024 21:04:57 &#43;0800</pubDate>
    <author>kyden</author>
    <guid>https://kydance.github.io/posts/golang-project-layout/</guid>
    <description><![CDATA[<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw" aria-hidden="true"></i>导语<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Go 应用程序项目的基本布局介绍</div>
        </div>
    </div>
<h2 id="go-module"><code>Go Module</code></h2>
<p>从 Go 1.14 版本开始，除非存在特定不使用 <code>Go Modules</code> 的理由，否则请使用，并且一旦使用，就无需再担心 <code>$GOPATH</code> 以及项目的存放位置。</p>
<h2 id="go-目录">Go 目录</h2>
<h3 id="cmd"><code>/cmd</code></h3>
<p><code>/cmd</code>，<strong>本项目的主干</strong>，其中每一个应用程序的目录名应该与你想要的可执行程序的名称相对应，例如 <code>/cmd/myApp</code>。</p>
<p>在 <code>/cmd</code> 目录下，不应该放置太多代码：</p>
<ul>
<li>如果认为代码可以导入并可在其他项目中使用，那么它应该位于 <code>/pkg</code> 目录中.</li>
<li>如果代码不是可重用的，或者不希望其他人重用它，那么应该位于 <code>/internal</code> 目录中.</li>
</ul>
<p>该目录下，通常有一个小的 <code>main</code> 函数，从 <code>/internal</code> 和 <code>pkg</code> 目录中导入和调用代码，除此之外没有别的东西.</p>
<p>微服务中的 app 服务类型分为4类：interface、service、job、admin</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="p">|</span>---cmd
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>---kydenapp-admin
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>---kydenapp-interface
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>---kydenapp-job
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>---kydenapp-service
</span></span><span class="line"><span class="cl"><span class="p">|</span>   <span class="p">|</span>---kydenapp-task
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>interface: 对外的 BFF 服务，接受来自用户的请求，比如暴露了 HTTP/gRPC 接口</li>
<li>service: 对内的微服务，仅接受来自内部其他服务或网关的请求，比如暴露了 gRPC 接口只对内服务</li>
<li>admin: 区别于 service，更多是面向运营测的服务，通常数据权限更高，隔离带来更好的代码级别安全</li>
<li>job: 流式任务处理的服务，上游一般依赖 message broker</li>
<li>task: 定时任务，类似 cronjob，部署到 task 托管平台中</li>
</ul>
<p><strong><code>/cmd</code> 应用目录负责程序的: 启动、关闭、配置初始化等</strong></p>
<blockquote>
<p><code>DTO(Data Transfer Object)</code>，数据传输对象，这个概念来源于 J2EE 的设计模式，
但这里泛指用于展示层/API层与服务层（业务逻辑层）之间的数据传输对象。</p>
</blockquote>
<h3 id="internal"><code>internal</code></h3>
<p><code>internal</code>，<strong>私有应用程序和库代码</strong>，它是不希望其他人在其应用程序或库中导入的代码。
该目录由 Go 强制执行，确保私有包不可导入。</p>
<h3 id="pkg"><code>pkg</code></h3>
<p><code>/pkg</code>，<strong>外部应用程序可以使用的库代码（例如 <code>/pkg/mypubliclib</code>）</strong>.</p>
<p>如果应用程序项目真的很小，并且额外的嵌套并不能增加多少价值(除非你真的想要:-)，那就不要使用它。
当它变得足够大时，根目录会变得非常繁琐时(尤其是当你有很多非 Go 应用组件时)，请考虑使用。</p>
<h3 id="api"><code>api</code></h3>
<p><code>/api</code>，协议定义目录，(<code>xxapi.proto</code>) protobuf 文件，以及生成的 go 文件。
通常把 api 文档直接在 proto 文件中描述。</p>
<h3 id="configs"><code>configs</code></h3>
<p>配置文件模版或默认配置</p>
<h3 id="scripts"><code>scripts</code></h3>
<p>执行各种构建、安装、分析等操作的脚本，是的根级别的 <code>Makefile</code> 变得小而简单</p>
<h3 id="test"><code>test</code></h3>
<p>额外的外部测试应用程序和测试数据</p>
<blockquote>
<p>Go 会忽略以 <code>.</code> 或 <code>_</code> 开头的目录和文件</p>
</blockquote>
<h3 id="docs"><code>docs</code></h3>
<p>设计和用户文档（godoc 生成的文档除外）</p>
<h3 id="tools"><code>tools</code></h3>
<p>项目的支持工具，可以从 <code>/pkg</code> 和 <code>/internal</code> 目录导入代码</p>
<h3 id="examples"><code>examples</code></h3>
<p>应用程序和/或公共库的示例</p>
<h3 id="third_party"><code>third_party</code></h3>
<p>外部辅助工具，分叉代码和其他第三方工具（例如 <code>Swagger UI</code>）</p>
<h3 id="assets"><code>assets</code></h3>
<p>与存储库一起使用的其他资源（图像、徽标等）</p>
<blockquote>
<p>按理来说我们不应该 <code>src</code> 目录，但有些 Go 项目拥有一个 <code>src</code> 文件夹，这通常发生在开发人员具有 Java 背景
<code>$GOPATH</code> 环境变量指向你的(当前)工作空间(默认情况下，它指向非 windows 系统上的 <code>$HOME/go</code>)，这个工作空间包括顶层 <code>/pkg</code>, <code>/bin</code> 和 <code>/src</code> 目录，而实际项目最终是 <code>/src</code> 下的一个子目录，即 <code>/xxx/workspace/src/proj/src/xxx.go</code>（Go 1.11 之后，项目 <code>proj</code> 可以放在 <code>GOPATH</code> 之外）.</p>
</blockquote>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://talks.golang.org/2014/names.slide" target="_blank" rel="noopener noreffer ">https://talks.golang.org/2014/names.slide</a></li>
<li><a href="https://golang.org/doc/effective_go.html#names" target="_blank" rel="noopener noreffer ">https://golang.org/doc/effective_go.html#names</a></li>
<li><a href="https://blog.golang.org/package-names" target="_blank" rel="noopener noreffer ">https://blog.golang.org/package-names</a></li>
<li><a href="https://go.dev/wiki/CodeReviewComments" target="_blank" rel="noopener noreffer ">https://go.dev/wiki/CodeReviewComments</a></li>
<li><a href="https://rakyll.org/style-packages" target="_blank" rel="noopener noreffer ">Style guideline for Go packages (rakyll/JBD)</a></li>
</ul>]]></description>
</item>
</channel>
</rss>

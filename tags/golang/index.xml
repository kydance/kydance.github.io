<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Golang - Tag - KyteDance-鸢舞</title>
        <link>https://kydance.github.io/tags/golang/</link>
        <description>Golang - Tag - KyteDance-鸢舞</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>kytedance@gmail.com (kyden)</managingEditor>
            <webMaster>kytedance@gmail.com (kyden)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 01 Jun 2024 21:37:55 &#43;0800</lastBuildDate><atom:link href="https://kydance.github.io/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>浅析 Golang Context</title>
    <link>https://kydance.github.io/posts/golang-context/</link>
    <pubDate>Sat, 01 Jun 2024 21:37:55 &#43;0800</pubDate>
    <author>kyden</author>
    <guid>https://kydance.github.io/posts/golang-context/</guid>
    <description><![CDATA[<p>当需要在多个 Goroutine 中传递上下文信息时，可以使用 Context 实现</p>
<h2 id="context">Context</h2>
<p>Context 除了用来传递上下文信息，还可以用来传递终结执行子任务的相关信号，终止多个执行子任务的 Goroutine。</p>
<p><code>context.Context</code> 接口数据结构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span><span class="lnt">96
</span><span class="lnt">97
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// A Context carries a deadline, a cancellation signal, and other values across
</span></span></span><span class="line"><span class="cl"><span class="c1">// API boundaries.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Context&#39;s methods may be called by multiple goroutines simultaneously.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Context</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Deadline returns the time when work done on behalf of this context
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// should be canceled. Deadline returns ok==false when no deadline is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// set. Successive calls to Deadline return the same results.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Deadline</span><span class="p">()</span> <span class="p">(</span><span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">ok</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Done returns a channel that&#39;s closed when work done on behalf of this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// context should be canceled. Done may return nil if this context can
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// never be canceled. Successive calls to Done return the same value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// The close of the Done channel may happen asynchronously,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// after the cancel function returns.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// WithCancel arranges for Done to be closed when cancel is called;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// WithDeadline arranges for Done to be closed when the deadline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// expires; WithTimeout arranges for Done to be closed when the timeout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// elapses.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Done is provided for use in select statements:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  // Stream generates values with DoSomething and sends them to out
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  // until DoSomething returns an error or ctx.Done is closed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  func Stream(ctx context.Context, out chan&lt;- Value) error {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  	for {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  		v, err := DoSomething(ctx)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  		if err != nil {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  			return err
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  		}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  		select {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  		case &lt;-ctx.Done():
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  			return ctx.Err()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  		case out &lt;- v:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  		}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  	}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//  }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// See https://blog.golang.org/pipelines for more examples of how to use
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// a Done channel for cancellation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Done</span><span class="p">()</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If Done is not yet closed, Err returns nil.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// If Done is closed, Err returns a non-nil error explaining why:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Canceled if the context was canceled
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// or DeadlineExceeded if the context&#39;s deadline passed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// After Err returns a non-nil error, successive calls to Err return the same error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Err</span><span class="p">()</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Value returns the value associated with this context for key, or nil
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// if no value is associated with key. Successive calls to Value with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the same key returns the same result.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Use context values only for request-scoped data that transits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// processes and API boundaries, not for passing optional parameters to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// functions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// A key identifies a specific value in a Context. Functions that wish
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to store values in Context typically allocate a key in a global
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// variable then use that key as the argument to context.WithValue and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Context.Value. A key can be any type that supports equality;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// packages should define keys as an unexported type to avoid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// collisions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Packages that define a Context key should provide type-safe accessors
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// for the values stored using that key:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// Package user defines a User type that&#39;s stored in Contexts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	package user
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	import &#34;context&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// User is the type of value stored in the Contexts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	type User struct {...}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// key is an unexported type for keys defined in this package.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// This prevents collisions with keys defined in other packages.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	type key int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// userKey is the key for user.User values in Contexts. It is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// unexported; clients use user.NewContext and user.FromContext
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// instead of using this key directly.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	var userKey key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// NewContext returns a new Context that carries value u.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	func NewContext(ctx context.Context, u *User) context.Context {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 		return context.WithValue(ctx, userKey, u)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	// FromContext returns the User value stored in ctx, if any.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	func FromContext(ctx context.Context) (*User, bool) {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 		u, ok := ctx.Value(userKey).(*User)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 		return u, ok
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 	}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Value</span><span class="p">(</span><span class="nx">key</span> <span class="nx">any</span><span class="p">)</span> <span class="nx">any</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>Deadline</code>：返回 Context 被取消的时间，也就是完成工作的截至日期；</li>
<li><code>Done</code>：返回一个 channel，这个 channel 会在当前工作完成或者上下文被取消之后关闭，多次调用 <code>Done</code> 方法会返回同一个 channel；</li>
<li><code>Err</code>：放回 Context 结束的原因，只会在 <code>Done</code> 返回的 channel 被关闭时才会返回非空的值，如果 Context 被取消，会返回 Canceled 错误；如果 Context 超时，会返回 DeadlineExceeded 错误；</li>
<li><code>Value</code>：可用于从 Context 中获取传递的键值信息；</li>
</ul>
<hr>
<h2 id="example">Example</h2>
<p>在 Web 请求的处理过程中，一个请求可能启动多个 goroutine 协同工作，这些 goroutine 之间可能需要共享请求的信息，且当请求被取消或者执行超时时，该请求对应的所有 goroutine 都需要快速结束，释放资源，Context 就是为了解决上述场景而开发的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">DB_ADDRESS</span> <span class="p">=</span> <span class="s">&#34;db_address&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">CALCULATE_VALUE</span> <span class="p">=</span> <span class="s">&#34;calculate_value&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">readDB</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cost</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;DB address is &#34;</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Value</span><span class="p">(</span><span class="nx">DB_ADDRESS</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">cost</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read data from db&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Err</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">calculate</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cost</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;calculate value is&#34;</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Value</span><span class="p">(</span><span class="nx">CALCULATE_VALUE</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">cost</span><span class="p">):</span> <span class="c1">//  模拟数据计算
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;calculate finish&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Err</span><span class="p">())</span> <span class="c1">// 任务取消的原因
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 一些清理工作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Add Context info
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithValue</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">DB_ADDRESS</span><span class="p">,</span> <span class="s">&#34;localhost:3306&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithValue</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">CALCULATE_VALUE</span><span class="p">,</span> <span class="s">&#34;123&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">readDB</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">calculate</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>使用 Context，能够有效地在一组 goroutine 中传递共享值、取消信号、deadline 等信息，及时关闭不需要的 goroutine。</p>
</blockquote>
<hr>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/context/context.go" target="_blank" rel="noopener noreffer ">Go Context</a></li>
</ul>]]></description>
</item>
<item>
    <title>深入探讨 Golang Escape Analysis</title>
    <link>https://kydance.github.io/posts/golang-escape-analysis/</link>
    <pubDate>Sun, 19 May 2024 22:47:26 &#43;0800</pubDate>
    <author>kyden</author>
    <guid>https://kydance.github.io/posts/golang-escape-analysis/</guid>
    <description><![CDATA[<p><strong>深入理解 Golang Escape Analysis：变量何时逃逸？</strong></p>
<h2 id="i-golang-escape-ananlysis">I. Golang Escape Ananlysis</h2>
<p>Golang 编译器会自动决定把一个变量放在堆栈还是栈上，即逃逸分析（Escape Analysis）.</p>
<p>Go 声称逃逸分析可以释放程序员关于内存的使用限制，更多地关注程序逻辑本身。</p>
<hr>
<h2 id="ii-逃逸规则">II. 逃逸规则</h2>
<p>众所周知，当变量需要使用堆（heap）空间时，那么变量就应该进行逃逸。</p>
<p>一般情况下，一个引用对象中的引用类成员进行赋值，可能出现逃逸现象：可以理解为访问一个引用对象实际上底层就是通过一个指针来间接的访问，但如果再访问里面的引用成员就会有第二次间接访问，这样操作这部分对象的话，极大可能会出现逃逸的现象。</p>
<p>Golang 中的引用类型有函数类型 <code>func()</code>，接口类型 <code>interface</code>，切片类型 <code>slice</code>，字典类型 map，管道类型 <code>channel</code>，指针类型 <code>*</code> 等。</p>
<h3 id="逃逸场景i-interface">逃逸场景I： <code>[]interface{}</code></h3>
<p><strong>使用 <code>[]</code> 赋值 <code>[]interface{}</code> 数据类型，必定逃逸</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:8:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:6:23: <span class="o">[]</span>interface <span class="o">{}{</span>...<span class="o">}</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:6:24: <span class="m">1</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:6:27: <span class="m">2</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:8:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:9:12: <span class="m">3</span> escapes to heap
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景ii-mapstringinterface">逃逸场景II： <code>map[string]interface{}</code></h3>
<p><strong>使用 <code>[]</code> 赋值 <code>map[string]interface{}</code> 数据类型，必定逃逸</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;Kyden&#39;s Blog&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:9:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:6:13: make<span class="o">(</span>map<span class="o">[</span>string<span class="o">]</span>interface <span class="o">{})</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:7:20: <span class="s2">&#34;Kyden&#39;s Blog&#34;</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:9:12: ... argument does not escape
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景-iii-mapinterfaceinterface">逃逸场景 III： <code>map[interface{}]interface{}</code></h3>
<p><strong>使用 <code>[]</code> 赋值 <code>map[interface{}]interface{}</code> 数据类型，必定逃逸</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;Kyden&#39;s Blog&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:11:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:8:13: make<span class="o">(</span>map<span class="o">[</span>interface <span class="o">{}]</span>interface <span class="o">{})</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:9:6: <span class="s2">&#34;BlogName&#34;</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:9:20: <span class="s2">&#34;Kyden&#39;s Blog&#34;</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:10:13: <span class="s2">&#34;BlogName&#34;</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:11:12: ... argument does not escape
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景-ivmapstringstring">逃逸场景 IV：<code>map[string][]string</code></h3>
<p><code>map[string][]string</code> 数据类型，赋值会发生 <code>[]string</code> 逃逸</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;Kyden&#39;s Blog&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">val</span> <span class="o">:=</span> <span class="nx">dat</span><span class="p">[</span><span class="s">&#34;BlogName&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:11:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:8:13: make<span class="o">(</span>map<span class="o">[</span>string<span class="o">][]</span>string<span class="o">)</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:9:28: <span class="o">[]</span>string<span class="o">{</span>...<span class="o">}</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:11:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:11:21: val escapes to heap
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景-vint">逃逸场景 V：<code>[]*int</code></h3>
<p><code>[]*int</code> 数据类型，赋值的右值会发生逃逸</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span> <span class="o">:=</span> <span class="p">[]</span><span class="o">*</span><span class="kt">int</span><span class="p">{</span><span class="kc">nil</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span> <span class="o">:=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\r\n&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\r\n&#34;</span><span class="p">,</span> <span class="nx">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl">command-line-arguments
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:9:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:10:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:7:2: moved to heap: a
</span></span><span class="line"><span class="cl">./main.go:6:15: <span class="o">[]</span>*int<span class="o">{</span>...<span class="o">}</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:9:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:9:23: *dat<span class="o">[</span>0<span class="o">]</span> escapes to heap
</span></span><span class="line"><span class="cl">./main.go:10:12: ... argument does not escape
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="逃逸场景-vifuncint">逃逸场景 VI：<code>func(*int)</code></h3>
<p><code>func(*int)</code> 数据类型，进行函数赋值，会使传递的形参逃逸</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">(</span><span class="nx">a</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span> <span class="o">:=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fn</span> <span class="o">:=</span> <span class="nx">f</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;a = %v\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -v -gcflags<span class="o">=</span><span class="s1">&#39;-m&#39;</span> ./main.go
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:6:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:14:12: inlining call to fmt.Printf
</span></span><span class="line"><span class="cl">./main.go:5:8: a does not escape
</span></span><span class="line"><span class="cl">./main.go:6:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:6:21: *a escapes to heap
</span></span><span class="line"><span class="cl">./main.go:14:12: ... argument does not escape
</span></span><span class="line"><span class="cl">./main.go:14:25: a escapes to heap
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>深入理解 Golang GMP</title>
    <link>https://kydance.github.io/posts/golang-gmp/</link>
    <pubDate>Wed, 15 May 2024 13:41:49 &#43;0800</pubDate>
    <author>kyden</author>
    <guid>https://kydance.github.io/posts/golang-gmp/</guid>
    <description><![CDATA[<p><strong>Go 的调度流程本质上是一个生产-消费流程.</strong></p>
<h2 id="i-processthreadco-routine">I. Process、Thread、Co-routine</h2>
<h3 id="进程-process">进程 Process</h3>
<p>在操作系统中，进程使用<strong>进程控制块 (PCB, Process Control Block)</strong> 数据结构 <code>task_struct</code> 来描述，PCB 是进程存在的唯一标识。</p>
<ul>
<li>进程是指在系统中正在运行的一个应用程序，程序一旦运行就是进程；</li>
<li>进程可以认为是程序执行的一个实例，进程是系统进行资源分配的最小单位，且每个进程拥有独立的地址空间；</li>
<li>一个进程无法直接访问到另一个进程的变量和数据结构，如果希望一个进程去访问另一个进程的资源，需要使用进程间的通信，如<code>fifo</code>、<code>pipe</code>、<code>signal</code>、<code>socket</code> 等；</li>
<li>进程调度算法：先来先服务调度算法、短作业优先调度算法、最短剩余作业优先调度算法、最高响应比优先调度算法、最高优先级优先调度算法、时间片轮转算法（公平调度，$20 - 50 ms$）、多级反馈队列调度算法($最高优先级 + 时间片轮转$)；</li>
</ul>
<hr>
<h3 id="线程-thread">线程 Thread</h3>
<p><strong>用户态线程</strong>，是基于用户态的线程管理库来实现的，<strong>线程控制块 (Thread Control Block)</strong> 也是在库里实现，操作系统只能看到整个进程的PCB，即进程与用户线程属于<strong>多对一</strong>的模型。</p>
<p><strong>内核态线程(Thread)</strong>，是由操作系统管理，对应的 TCB 存储在操作系统里，且其创建、销毁、调度都由操作系统完成；</p>
<p><strong>轻量级线程 LWP(Light-weight process)</strong>，是由内核支持的用户线程，一个进程可以有一个或多个 LWP，每个 LWP 是跟内核线程一对一映射的，即 LWP 都是由一个内核线程支持，而且 LWP 是由内核管理并像普通进程一样被调度。
<strong>在大多数系统中，LWP 和 普通进程的区别在于，LWP 只有一个最小的执行上下文和调度程序所需的统计信息。</strong></p>
<ul>
<li>线程是进程的一个实体，是进程的一条执行路径；</li>
<li>线程是比进程更小的独立运行的基本单位</li>
<li><strong>一个程序至少存在一个进程，一个进程可以有多个($&gt;=1$)线程</strong></li>
</ul>
<blockquote>
<p><strong>进程与线程的区别</strong></p>
<ul>
<li>进程是资源（包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位；</li>
<li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li>
<li><strong>同一进程的线程共享本进程的地址空间，而进程之间则是独立的地址空间</strong>；</li>
<li><strong>同一进程内的线程共享本地的资源，但是进程之间的资源是独立的</strong>；</li>
<li><strong>一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程崩溃，即多进程比多线程健壮</strong>；</li>
<li>进程切换，消耗的资源大（主要是虚拟地址空间的切换开销），线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li>
<li>多进程、多线程都可以并发执行，线程能减少并发执行的时间和空间开销；</li>
<li>每个独立的进程有一个程序入口、程序出口；线程不能独立运行，必须依存于应用程序中，有应用程序提供多个线程执行控制；</li>
</ul>
</blockquote>
<hr>
<h3 id="协程-co-routine">协程 Co-routine</h3>
<p><strong>协程</strong>，又称 &ldquo;微线程&rdquo;，表现为一个可以 suspend 和 resume 的函数。</p>
<p>实现协程的关键点：<strong>在于如何保存、恢复和切换上下文</strong>，协程切换只涉及基本的CPU上下文切换（CPU寄存器）.</p>
<p>所有的协程共用的都是一个栈，即系统栈，也就也不必我们自行去给协程分配栈，因为是函数调用，我们当然也不必去显示的保存寄存器的值；</p>
<h4 id="co-routine-分类">Co-routine 分类</h4>
<p><strong>有栈 (stackful) 协程</strong>：实现类似于内核态线程的实现，不同协程的切换还是要切换对应的栈上下文，只是不用陷入内核，例如 goroutine、libco</p>
<p><strong>无栈 (stackless) 协程</strong>：无栈协程的上下文都会放到公共内存中，在协程切换时使用状态机来切换，而不用切换对应的上下文（都已经在堆中），相比有栈协程更轻量，例如 C++20、Rust、JavaScript；<strong>==本质就是一个状态机（state machine），即同一协程协程的切换本质不过是指令指针寄存器的改变==</strong></p>
<h4 id="co-routine-特点">Co-routine 特点</h4>
<ul>
<li>一个线程可以有多个协程；协程不是被操作系统内核管理，而是完全由程序控制；</li>
<li>协程的开销远远小于线程；协程拥有自己的寄存器上下文和栈，在进行协程调度时，将寄存器上下文和栈保存到其他地方，在切换回来时恢复先前保存的寄存器上下文和栈；</li>
<li>每个协程表示一个执行单元，有自己的本地数据，与其他协程共享全局数据和其他资源；</li>
<li>跨平台、跨体系架构、无需线程上下文切换的开销、方便切换控制流，简化编程模型；</li>
<li>协程的执行效率极高，和多线程相比，线程数量越多，协程的性能优势越明显；</li>
</ul>
<hr>
<h2 id="ii-gmp">II. GMP</h2>
<p>Golang 为提供更加容易使用的并发工具，基于 GMP 模型实现了 goroutine 和 channel。</p>
<p>Goroutine 属于 Co-routine 的概念，非常轻量，一个 goroutine 初始空间只占几 KB 且可伸缩，使得在有限空间内支持大量 goroutine 并发。</p>
<p>Channel 可以独立创建和存取，在不同的 Goroutine 中传递使用，作为队列，遵循 FIFO 原则，同时保证同一时刻只能有一个 goroutine 访问。
channel 作为一种引用类型，声明时需要指定传输数据类型，声明形式如下(<code>T</code> 是 channel 可传输的数据类型)：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 声明 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">ch</span> <span class="kd">chan</span> <span class="nx">T</span>	<span class="c1">// 双向 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="nx">T</span>	<span class="c1">// 只能发送 msg 的 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">ch</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">T</span> 	<span class="c1">// 只能接收 msg 的 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 创建 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">capicity</span><span class="p">)</span>	<span class="c1">// 双向 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span><span class="o">&lt;-</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">capicity</span><span class="p">)</span>	<span class="c1">// 只能发送 msg 的 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">capicity</span><span class="p">)</span>	<span class="c1">// 只能接收 msg 的 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 访问 channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">msg</span>	<span class="c1">// 发送 msg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">msg</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>	<span class="c1">// 接收 msg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">msg</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span> <span class="c1">// 接收 msg，同时判断 channel 是否接收成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">close</span><span class="p">(</span><span class="nx">ch</span><span class="p">)</span>	<span class="c1">// 关闭 channel
</span></span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="golang-调度">Golang 调度</h3>
<h4 id="调度组件">调度组件</h4>
<ul>
<li>G：Goroutine，一个计算任务. 由需要执行的代码和其上下文组成，上下文包括：当前代码位置、栈空间(初始2K，可增长)、状态等。</li>
<li>M：Machine，系统线程，执行实体。与 C 语言中的线程相同，通过 <code>clone</code> 创建。</li>
<li>P: Processor，虚拟处理器，包含了 G 运行所需的资源，因此 M 必须获得 P 才能执行代码，否则必须陷入休眠（后台监控线程除外）。可理解为一种 token，有这个 token，才有在物理 CPU 核心上执行的权限。</li>
</ul>
<p>相关数据结构定义如下：</p>
<p><code>g</code> 的数据结构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">g</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Stack parameters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// stack describes the actual stack memory: [stack.lo, stack.hi).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// stackguard0 is the stack pointer compared in the Go stack growth prologue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// It is stack.lo+StackGuard normally, but can be StackPreempt to trigger a preemption.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// stackguard1 is the stack pointer compared in the //go:systemstack stack growth prologue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// It is stack.lo+StackGuard on g0 and gsignal stacks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// It is ~0 on other goroutine stacks, to trigger a call to morestackc (and crash).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stack</span>       <span class="nx">stack</span>   <span class="c1">// offset known to runtime/cgo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stackguard0</span> <span class="kt">uintptr</span> <span class="c1">// offset known to liblink
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stackguard1</span> <span class="kt">uintptr</span> <span class="c1">// offset known to liblink
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">_panic</span>    <span class="o">*</span><span class="nx">_panic</span> <span class="c1">// innermost panic - offset known to liblink
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_defer</span>    <span class="o">*</span><span class="nx">_defer</span> <span class="c1">// innermost defer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">m</span>         <span class="o">*</span><span class="nx">m</span>      <span class="c1">// current m; offset known to arm liblink
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sched</span>     <span class="nx">gobuf</span>
</span></span><span class="line"><span class="cl">	<span class="nx">syscallsp</span> <span class="kt">uintptr</span> <span class="c1">// if status==Gsyscall, syscallsp = sched.sp to use during gc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">syscallpc</span> <span class="kt">uintptr</span> <span class="c1">// if status==Gsyscall, syscallpc = sched.pc to use during gc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stktopsp</span>  <span class="kt">uintptr</span> <span class="c1">// expected sp at top of stack, to check in traceback
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// param is a generic pointer parameter field used to pass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// values in particular contexts where other storage for the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// parameter would be difficult to find. It is currently used
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// in four ways:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 1. When a channel operation wakes up a blocked goroutine, it sets param to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//    point to the sudog of the completed blocking operation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2. By gcAssistAlloc1 to signal back to its caller that the goroutine completed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//    the GC cycle. It is unsafe to do so in any other way, because the goroutine&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//    stack may have moved in the meantime.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 3. By debugCallWrap to pass parameters to a new goroutine because allocating a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//    closure in the runtime is forbidden.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 4. When a panic is recovered and control returns to the respective frame,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//    param may point to a savedOpenDeferState.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">param</span>        <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">atomicstatus</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stackLock</span>    <span class="kt">uint32</span> <span class="c1">// sigprof/scang lock; TODO: fold in to atomicstatus
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">goid</span>         <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">schedlink</span>    <span class="nx">guintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">waitsince</span>    <span class="kt">int64</span>      <span class="c1">// approx time when the g become blocked
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">waitreason</span>   <span class="nx">waitReason</span> <span class="c1">// if status==Gwaiting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">preempt</span>       <span class="kt">bool</span> <span class="c1">// preemption signal, duplicates stackguard0 = stackpreempt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">preemptStop</span>   <span class="kt">bool</span> <span class="c1">// transition to _Gpreempted on preemption; otherwise, just deschedule
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">preemptShrink</span> <span class="kt">bool</span> <span class="c1">// shrink stack at synchronous safe point
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// asyncSafePoint is set if g is stopped at an asynchronous
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// safe point. This means there are frames on the stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// without precise pointer information.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">asyncSafePoint</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">paniconfault</span> <span class="kt">bool</span> <span class="c1">// panic (instead of crash) on unexpected fault address
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gcscandone</span>   <span class="kt">bool</span> <span class="c1">// g has scanned stack; protected by _Gscan bit in status
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">throwsplit</span>   <span class="kt">bool</span> <span class="c1">// must not split stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// activeStackChans indicates that there are unlocked channels
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// pointing into this goroutine&#39;s stack. If true, stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// copying needs to acquire channel locks to protect these
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// areas of the stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">activeStackChans</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// parkingOnChan indicates that the goroutine is about to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// park on a chansend or chanrecv. Used to signal an unsafe point
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// for stack shrinking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">parkingOnChan</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// inMarkAssist indicates whether the goroutine is in mark assist.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Used by the execution tracer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">inMarkAssist</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">coroexit</span>     <span class="kt">bool</span> <span class="c1">// argument to coroswitch_m
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">raceignore</span>    <span class="kt">int8</span>  <span class="c1">// ignore race detection events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nocgocallback</span> <span class="kt">bool</span>  <span class="c1">// whether disable callback from C
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tracking</span>      <span class="kt">bool</span>  <span class="c1">// whether we&#39;re tracking this G for sched latency statistics
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">trackingSeq</span>   <span class="kt">uint8</span> <span class="c1">// used to decide whether to track this G
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">trackingStamp</span> <span class="kt">int64</span> <span class="c1">// timestamp of when the G last started being tracked
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">runnableTime</span>  <span class="kt">int64</span> <span class="c1">// the amount of time spent runnable, cleared when running, only used when tracking
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lockedm</span>       <span class="nx">muintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sig</span>           <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">writebuf</span>      <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sigcode0</span>      <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sigcode1</span>      <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sigpc</span>         <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">parentGoid</span>    <span class="kt">uint64</span>          <span class="c1">// goid of goroutine that created this goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gopc</span>          <span class="kt">uintptr</span>         <span class="c1">// pc of go statement that created this goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ancestors</span>     <span class="o">*</span><span class="p">[]</span><span class="nx">ancestorInfo</span> <span class="c1">// ancestor information goroutine(s) that created this goroutine (only used if debug.tracebackancestors)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">startpc</span>       <span class="kt">uintptr</span>         <span class="c1">// pc of goroutine function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">racectx</span>       <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">waiting</span>       <span class="o">*</span><span class="nx">sudog</span>         <span class="c1">// sudog structures this g is waiting on (that have a valid elem ptr); in lock order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cgoCtxt</span>       <span class="p">[]</span><span class="kt">uintptr</span>      <span class="c1">// cgo traceback context
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">labels</span>        <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span> <span class="c1">// profiler labels
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">timer</span>         <span class="o">*</span><span class="nx">timer</span>         <span class="c1">// cached timer for time.Sleep
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">selectDone</span>    <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span>  <span class="c1">// are we participating in a select and did someone win the race?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">coroarg</span> <span class="o">*</span><span class="nx">coro</span> <span class="c1">// argument during coroutine transfers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// goroutineProfiled indicates the status of this goroutine&#39;s stack for the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// current in-progress goroutine profile
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">goroutineProfiled</span> <span class="nx">goroutineProfileStateHolder</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Per-G tracer state.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">trace</span> <span class="nx">gTraceState</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Per-G GC state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// gcAssistBytes is this G&#39;s GC assist credit in terms of
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// bytes allocated. If this is positive, then the G has credit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to allocate gcAssistBytes bytes without assisting. If this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// is negative, then the G must correct this by performing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// scan work. We track this in bytes to make it fast to update
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// and check for debt in the malloc hot path. The assist ratio
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// determines how this corresponds to scan work debt.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gcAssistBytes</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>m</code> 的数据结构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">m</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g0</span>      <span class="o">*</span><span class="nx">g</span>     <span class="c1">// goroutine with scheduling stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">morebuf</span> <span class="nx">gobuf</span>  <span class="c1">// gobuf arg to morestack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">divmod</span>  <span class="kt">uint32</span> <span class="c1">// div/mod denominator for arm - known to liblink
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span>       <span class="kt">uint32</span> <span class="c1">// align next field to 8 bytes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Fields not known to debuggers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">procid</span>        <span class="kt">uint64</span>            <span class="c1">// for debuggers, but offset not hard-coded
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gsignal</span>       <span class="o">*</span><span class="nx">g</span>                <span class="c1">// signal-handling g
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">goSigStack</span>    <span class="nx">gsignalStack</span>      <span class="c1">// Go-allocated signal handling stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sigmask</span>       <span class="nx">sigset</span>            <span class="c1">// storage for saved signal mask
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tls</span>           <span class="p">[</span><span class="nx">tlsSlots</span><span class="p">]</span><span class="kt">uintptr</span> <span class="c1">// thread-local storage (for x86 extern register)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mstartfn</span>      <span class="kd">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">curg</span>          <span class="o">*</span><span class="nx">g</span>       <span class="c1">// current running goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">caughtsig</span>     <span class="nx">guintptr</span> <span class="c1">// goroutine running during fatal signal
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">p</span>             <span class="nx">puintptr</span> <span class="c1">// attached p for executing go code (nil if not executing go code)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nextp</span>         <span class="nx">puintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">oldp</span>          <span class="nx">puintptr</span> <span class="c1">// the p that was attached before executing a syscall
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">id</span>            <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mallocing</span>     <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">throwing</span>      <span class="nx">throwType</span>
</span></span><span class="line"><span class="cl">	<span class="nx">preemptoff</span>    <span class="kt">string</span> <span class="c1">// if != &#34;&#34;, keep curg running on this m
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">locks</span>         <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dying</span>         <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">profilehz</span>     <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">spinning</span>      <span class="kt">bool</span> <span class="c1">// m is out of work and is actively looking for work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">blocked</span>       <span class="kt">bool</span> <span class="c1">// m is blocked on a note
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newSigstack</span>   <span class="kt">bool</span> <span class="c1">// minit on C thread called sigaltstack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">printlock</span>     <span class="kt">int8</span>
</span></span><span class="line"><span class="cl">	<span class="nx">incgo</span>         <span class="kt">bool</span>          <span class="c1">// m is executing a cgo call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">isextra</span>       <span class="kt">bool</span>          <span class="c1">// m is an extra m
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">isExtraInC</span>    <span class="kt">bool</span>          <span class="c1">// m is an extra m that is not executing Go code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">isExtraInSig</span>  <span class="kt">bool</span>          <span class="c1">// m is an extra m in a signal handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">freeWait</span>      <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span> <span class="c1">// Whether it is safe to free g0 and delete m (one of freeMRef, freeMStack, freeMWait)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">needextram</span>    <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">traceback</span>     <span class="kt">uint8</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ncgocall</span>      <span class="kt">uint64</span>        <span class="c1">// number of cgo calls in total
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ncgo</span>          <span class="kt">int32</span>         <span class="c1">// number of cgo calls currently in progress
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cgoCallersUse</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span> <span class="c1">// if non-zero, cgoCallers in use temporarily
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cgoCallers</span>    <span class="o">*</span><span class="nx">cgoCallers</span>   <span class="c1">// cgo traceback if crashing in cgo call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">park</span>          <span class="nx">note</span>
</span></span><span class="line"><span class="cl">	<span class="nx">alllink</span>       <span class="o">*</span><span class="nx">m</span> <span class="c1">// on allm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">schedlink</span>     <span class="nx">muintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lockedg</span>       <span class="nx">guintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">createstack</span>   <span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="kt">uintptr</span> <span class="c1">// stack that created this thread, it&#39;s used for StackRecord.Stack0, so it must align with it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lockedExt</span>     <span class="kt">uint32</span>      <span class="c1">// tracking for external LockOSThread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lockedInt</span>     <span class="kt">uint32</span>      <span class="c1">// tracking for internal lockOSThread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nextwaitm</span>     <span class="nx">muintptr</span>    <span class="c1">// next m waiting for lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">mLockProfile</span> <span class="nx">mLockProfile</span> <span class="c1">// fields relating to runtime.lock contention
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// wait* are used to carry arguments from gopark into park_m, because
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// there&#39;s no stack to put them on. That is their sole purpose.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">waitunlockf</span>          <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">waitlock</span>             <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">waitTraceBlockReason</span> <span class="nx">traceBlockReason</span>
</span></span><span class="line"><span class="cl">	<span class="nx">waitTraceSkip</span>        <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">syscalltick</span> <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">freelink</span>    <span class="o">*</span><span class="nx">m</span> <span class="c1">// on sched.freem
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">trace</span>       <span class="nx">mTraceState</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// these are here because they are too large to be on the stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// of low-level NOSPLIT functions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">libcall</span>   <span class="nx">libcall</span>
</span></span><span class="line"><span class="cl">	<span class="nx">libcallpc</span> <span class="kt">uintptr</span> <span class="c1">// for cpu profiler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">libcallsp</span> <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">libcallg</span>  <span class="nx">guintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">syscall</span>   <span class="nx">libcall</span> <span class="c1">// stores syscall parameters on windows
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">vdsoSP</span> <span class="kt">uintptr</span> <span class="c1">// SP for traceback while in VDSO call (0 if not in call)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">vdsoPC</span> <span class="kt">uintptr</span> <span class="c1">// PC for traceback while in VDSO call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// preemptGen counts the number of completed preemption
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// signals. This is used to detect when a preemption is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// requested, but fails.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">preemptGen</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Whether this is a pending preemption signal on this M.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">signalPending</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// pcvalue lookup cache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pcvalueCache</span> <span class="nx">pcvalueCache</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">dlogPerM</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">mOS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">chacha8</span>   <span class="nx">chacha8rand</span><span class="p">.</span><span class="nx">State</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cheaprand</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Up to 10 locks held by this m, maintained by the lock ranking code.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">locksHeldLen</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">locksHeld</span>    <span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="nx">heldLockInfo</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>p</code> 的数据结构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">p</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span>          <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">status</span>      <span class="kt">uint32</span> <span class="c1">// one of pidle/prunning/...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">link</span>        <span class="nx">puintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">schedtick</span>   <span class="kt">uint32</span>     <span class="c1">// incremented on every scheduler call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">syscalltick</span> <span class="kt">uint32</span>     <span class="c1">// incremented on every system call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sysmontick</span>  <span class="nx">sysmontick</span> <span class="c1">// last tick observed by sysmon
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">m</span>           <span class="nx">muintptr</span>   <span class="c1">// back-link to associated m (nil if idle)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mcache</span>      <span class="o">*</span><span class="nx">mcache</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pcache</span>      <span class="nx">pageCache</span>
</span></span><span class="line"><span class="cl">	<span class="nx">raceprocctx</span> <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">deferpool</span>    <span class="p">[]</span><span class="o">*</span><span class="nx">_defer</span> <span class="c1">// pool of available defer structs (see panic.go)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">deferpoolbuf</span> <span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="o">*</span><span class="nx">_defer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Cache of goroutine ids, amortizes accesses to runtime·sched.goidgen.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">goidcache</span>    <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">goidcacheend</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Queue of runnable goroutines. Accessed without lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">runqhead</span> <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">runqtail</span> <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">runq</span>     <span class="p">[</span><span class="mi">256</span><span class="p">]</span><span class="nx">guintptr</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// runnext, if non-nil, is a runnable G that was ready&#39;d by
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the current G and should be run next instead of what&#39;s in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// runq if there&#39;s time remaining in the running G&#39;s time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// slice. It will inherit the time left in the current time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// slice. If a set of goroutines is locked in a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// communicate-and-wait pattern, this schedules that set as a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// unit and eliminates the (potentially large) scheduling
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// latency that otherwise arises from adding the ready&#39;d
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// goroutines to the end of the run queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Note that while other P&#39;s may atomically CAS this to zero,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// only the owner P can CAS it to a valid G.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">runnext</span> <span class="nx">guintptr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Available G&#39;s (status == Gdead)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gFree</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gList</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span> <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">sudogcache</span> <span class="p">[]</span><span class="o">*</span><span class="nx">sudog</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sudogbuf</span>   <span class="p">[</span><span class="mi">128</span><span class="p">]</span><span class="o">*</span><span class="nx">sudog</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Cache of mspan objects from the heap.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mspancache</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// We need an explicit length here because this field is used
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// in allocation codepaths where write barriers are not allowed,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// and eliminating the write barrier/keeping it eliminated from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// slice updates is tricky, more so than just managing the length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// ourselves.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">len</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">		<span class="nx">buf</span> <span class="p">[</span><span class="mi">128</span><span class="p">]</span><span class="o">*</span><span class="nx">mspan</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Cache of a single pinner object to reduce allocations from repeated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// pinner creation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pinnerCache</span> <span class="o">*</span><span class="nx">pinner</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span> <span class="nx">pTraceState</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">palloc</span> <span class="nx">persistentAlloc</span> <span class="c1">// per-P to avoid mutex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// The when field of the first entry on the timer heap.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This is 0 if the timer heap is empty.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">timer0When</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Int64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// The earliest known nextwhen field of a timer with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// timerModifiedEarlier status. Because the timer may have been
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// modified again, there need not be any timer with this value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This is 0 if there are no timerModifiedEarlier timers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">timerModifiedEarliest</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Int64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Per-P GC state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gcAssistTime</span>         <span class="kt">int64</span> <span class="c1">// Nanoseconds in assistAlloc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gcFractionalMarkTime</span> <span class="kt">int64</span> <span class="c1">// Nanoseconds in fractional mark worker (atomic)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// limiterEvent tracks events for the GC CPU limiter.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">limiterEvent</span> <span class="nx">limiterEvent</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// gcMarkWorkerMode is the mode for the next mark worker to run in.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// That is, this is used to communicate with the worker goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// selected for immediate execution by
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// gcController.findRunnableGCWorker. When scheduling other goroutines,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this field must be set to gcMarkWorkerNotWorker.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gcMarkWorkerMode</span> <span class="nx">gcMarkWorkerMode</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// gcMarkWorkerStartTime is the nanotime() at which the most recent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// mark worker started.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gcMarkWorkerStartTime</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// gcw is this P&#39;s GC work buffer cache. The work buffer is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// filled by write barriers, drained by mutator assists, and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// disposed on certain GC state transitions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gcw</span> <span class="nx">gcWork</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// wbBuf is this P&#39;s GC write barrier buffer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// TODO: Consider caching this in the running G.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wbBuf</span> <span class="nx">wbBuf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">runSafePointFn</span> <span class="kt">uint32</span> <span class="c1">// if 1, run sched.safePointFn at next safe point
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// statsSeq is a counter indicating whether this P is currently
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// writing any stats. Its value is even when not, odd when it is.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">statsSeq</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Lock for timers. We normally access the timers while running
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// on this P, but the scheduler can also do it from a different P.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">timersLock</span> <span class="nx">mutex</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Actions to take at some time. This is used to implement the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// standard library&#39;s time package.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Must hold timersLock to access.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">timers</span> <span class="p">[]</span><span class="o">*</span><span class="nx">timer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Number of timers in P&#39;s heap.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">numTimers</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Number of timerDeleted timers in P&#39;s heap.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">deletedTimers</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Race context used while executing timer functions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">timerRaceCtx</span> <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// maxStackScanDelta accumulates the amount of stack space held by
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// live goroutines (i.e. those eligible for stack scanning).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Flushed to gcController.maxStackScan once maxStackScanSlack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// or -maxStackScanSlack is reached.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">maxStackScanDelta</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// gc-time statistics about current goroutines
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Note that this differs from maxStackScan in that this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// accumulates the actual stack observed to be used at GC time (hi - sp),
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// not an instantaneous measure of the total stack size that might need
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to be scanned (hi - lo).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">scannedStackSize</span> <span class="kt">uint64</span> <span class="c1">// stack size of goroutines scanned by this P
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">scannedStacks</span>    <span class="kt">uint64</span> <span class="c1">// number of goroutines scanned by this P
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// preempt is set to indicate that this P should be enter the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// scheduler ASAP (regardless of what G is running on it).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">preempt</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// pageTraceBuf is a buffer for writing out page allocation/free/scavenge traces.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Used only if GOEXPERIMENT=pagetrace.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pageTraceBuf</span> <span class="nx">pageTraceBuf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Padding is no longer needed. False sharing is now not a worry because p is large enough
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// that its size class is an integer multiple of the cache line size (for any of our architectures).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在 <code>p</code> 的结构中，<code>runnext guintptr</code> 就是 run next，大小为 1，存放下一个将要运行的 G</li>
<li>在 <code>p</code> 的结构中，<code>runq [256]guintptr</code> 就是 local run queue，大小为 256 array，用于存放等待运行的 G</li>
</ul>
<hr>
<h4 id="调度流程">调度流程</h4>
<p>Go 的调度流程本质上是一个<strong>生产-消费</strong>流程：</p>
<figure>
</figure>

<p>为了实现简单、高效地调度 Goroutine，Golang 采用了 GMP 模型如下图所示：</p>
<figure>
</figure>

<ul>
<li><code>global run queue</code>: 存放等待运行的 G</li>
<li><code>local run queue</code>: 256 大小的 array，用于存放等待运行的 G</li>
<li><code>runnext</code>: 存放下一个将要运行的 G</li>
</ul>
<blockquote>
<p>由于将 Golang 的调度流程看作<strong>生产者-消费者</strong>流程，因此接下来将分别从生产者、消费者两个方面深入了解。</p>
</blockquote>
<h5 id="goroutine-的生产端"><strong>Goroutine</strong> 的生产端</h5>
<p>Goroutine 生产流程：</p>
<figure>
</figure>

<h5 id="goroutine-的消费端"><strong>Goroutine</strong> 的消费端</h5>
<blockquote>
<p>TODO</p>
<p>关于消费端函数调用链还需完善！！！</p>
</blockquote>
<p>Goroutine 消费流程：</p>
<figure>
</figure>

<hr>
<h3 id="goroutine-切换成本">Goroutine 切换成本</h3>
<p><code>gobuf</code> 描述了一个 Goroutine 所有现场，从一个 <code>g</code> 切换到另一个 <code>g</code>，只要把这几个现场字段保存下来，再将 <code>g</code> 入队，M 就可以执行其他 <code>g</code> 了，无需进入内核态。</p>
<p><code>gobuf</code> 数据结构如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">gobuf</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// The offsets of sp, pc, and g are known to (hard-coded in) libmach.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// ctxt is unusual with respect to GC: it may be a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// heap-allocated funcval, so GC needs to track it, but it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// needs to be set and cleared from assembly, where it&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// difficult to have write barriers. However, ctxt is really a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// saved, live register, and we only ever exchange it between
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the real register and the gobuf. Hence, we treat it as a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// root during stack scanning, which means assembly that saves
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// and restores it doesn&#39;t need write barriers. It&#39;s still
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// typed as a pointer so that any other writes from Go get
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// write barriers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sp</span>   <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pc</span>   <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span>    <span class="nx">guintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctxt</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ret</span>  <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lr</span>   <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bp</span>   <span class="kt">uintptr</span> <span class="c1">// for framepointer-enabled architectures
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="runtime-可拦截-goroutine-阻塞场景解析">runtime 可拦截 goroutine 阻塞场景解析</h3>
<p>Goroutine 属于协程的一种，因此存在运行态、阻塞态等各种状态。
那么 goroutine 什么情况下会发生阻塞？ 当 goroutine 发生阻塞时，GMP 模型如何应对？</p>
<p>显然，当 goroutine 发生可被 runtime 拦截的阻塞时，GMP 模型并不会阻塞调度循环，
而是把 goroutine 挂起，即让 <code>g</code> 先进某个数据结构，待 <code>ready</code> 后在继续执行，并不会占用线程，
同时线程会进入 <code>schedule</code>，继续消费队列，执行其他的 <code>g</code>.</p>
<h4 id="场景-i-延迟">场景 I: 延迟</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Before: &#34;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">30</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;After: &#34;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>函数调用链如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span> <span class="o">-</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">runtime</span><span class="p">.</span><span class="nx">timeSleep</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="nx">gp</span> <span class="o">:=</span> <span class="nf">getg</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span> <span class="o">:=</span> <span class="nx">gp</span><span class="p">.</span><span class="nx">timer</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nx">arg</span> <span class="p">=</span> <span class="nx">gp</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="o">-</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">gopark</span><span class="p">(</span><span class="nx">resetForSleep</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">t</span><span class="p">),</span> <span class="nx">waitReasonSleep</span><span class="p">,</span> <span class="nx">traceBlockSleep</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>显然，在 <code>runtime.timeSleep</code> 函数中，获取到的当前 <code>g</code> 被挂在 <code>runtime.timer.arg</code> 上，然后被挂起。</p>
<hr>
<h4 id="场景-ii-channel-send--recv-chan--select">场景 II: Channel send / recv (<code>chan</code> / <code>select</code>)</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">ch</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">wg</span> <span class="p">=</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">ch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}(</span><span class="nx">ch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ch</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">val</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}(</span><span class="nx">ch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>函数 <code>ch&lt;-</code> 调用链如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="nx">ch</span><span class="o">&lt;-</span> <span class="o">-</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">runtime</span><span class="p">.</span><span class="nx">chansend1</span> <span class="o">-</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">runtime</span><span class="p">.</span><span class="nx">chansend</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="nx">gp</span> <span class="o">:=</span> <span class="nf">getg</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mysg</span> <span class="o">:=</span> <span class="nf">acquireSudog</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="nx">gp</span><span class="p">.</span><span class="nx">waiting</span> <span class="p">=</span> <span class="nx">mysg</span>
</span></span><span class="line"><span class="cl">    <span class="nx">gp</span><span class="p">.</span><span class="nx">param</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span><span class="p">.</span><span class="nx">sendq</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="nx">mysg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Signal to anyone trying to shrink our stack that we&#39;re about
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// to park on a channel. The window between when this G&#39;s status
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// changes and when we set gp.activeStackChans is not safe for
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// stack shrinking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">gp</span><span class="p">.</span><span class="nx">parkingOnChan</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">gopark</span><span class="p">(</span><span class="nx">chanparkcommit</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">lock</span><span class="p">),</span> <span class="nx">waitReasonChanSend</span><span class="p">,</span> <span class="nx">traceBlockChanSend</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="o">-</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gopark</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>函数 <code>ch&lt;-</code> 调用链如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="o">&lt;-</span><span class="nx">ch</span> <span class="o">-</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">runtime</span><span class="p">.</span><span class="nf">chanrecv1</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">hchan</span><span class="p">,</span> <span class="nx">elem</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="o">-</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">runtime</span><span class="p">.</span><span class="nf">chanrecv</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">hchan</span><span class="p">,</span> <span class="nx">ep</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">block</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">(</span><span class="nx">selected</span><span class="p">,</span> <span class="nx">received</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// no sender available: block on this channel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">gp</span> <span class="o">:=</span> <span class="nf">getg</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mysg</span> <span class="o">:=</span> <span class="nf">acquireSudog</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="nx">gp</span><span class="p">.</span><span class="nx">waiting</span> <span class="p">=</span> <span class="nx">mysg</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mysg</span><span class="p">.</span><span class="nx">g</span> <span class="p">=</span> <span class="nx">gp</span>
</span></span><span class="line"><span class="cl">      <span class="o">...</span>
</span></span><span class="line"><span class="cl">      <span class="nx">c</span><span class="p">.</span><span class="nx">recvq</span><span class="p">.</span><span class="nf">enqueue</span><span class="p">(</span><span class="nx">mysg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// Signal to anyone trying to shrink our stack that we&#39;re about
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// to park on a channel. The window between when this G&#39;s status
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// changes and when we set gp.activeStackChans is not safe for
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// stack shrinking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">gp</span><span class="p">.</span><span class="nx">parkingOnChan</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nf">gopark</span><span class="p">(</span><span class="nx">chanparkcommit</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">lock</span><span class="p">),</span> <span class="nx">waitReasonChanReceive</span><span class="p">,</span> <span class="nx">traceBlockChanRecv</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="o">-</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">runtime</span><span class="p">.</span><span class="nf">gopark</span><span class="p">(</span><span class="nx">unlockf</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">lock</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">reason</span> <span class="nx">waitReason</span><span class="p">,</span> <span class="nx">traceReason</span> <span class="nx">traceBlockReason</span><span class="p">,</span> <span class="nx">traceskip</span> <span class="kt">int</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>根据调用链可知，<code>g</code> 被封装进 <code>sudog</code> 中，然后挂在了 <code>hchan.sendq</code> 链表上。</p>
<p>相关数据结构 <code>sudog</code>, <code>sendq</code> 如下：</p>
<p><code>sudog</code> 的数据结构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// sudog (pseudo-g) represents a g in a wait list, such as for sending/receiving
</span></span></span><span class="line"><span class="cl"><span class="c1">// on a channel.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// sudog is necessary because the g ↔ synchronization object relation
</span></span></span><span class="line"><span class="cl"><span class="c1">// is many-to-many. A g can be on many wait lists, so there may be
</span></span></span><span class="line"><span class="cl"><span class="c1">// many sudogs for one g; and many gs may be waiting on the same
</span></span></span><span class="line"><span class="cl"><span class="c1">// synchronization object, so there may be many sudogs for one object.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// sudogs are allocated from a special pool. Use acquireSudog and
</span></span></span><span class="line"><span class="cl"><span class="c1">// releaseSudog to allocate and free them.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">sudog</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// The following fields are protected by the hchan.lock of the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// channel this sudog is blocking on. shrinkstack depends on
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this for sudogs involved in channel ops.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">g</span> <span class="o">*</span><span class="nx">g</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">next</span> <span class="o">*</span><span class="nx">sudog</span>
</span></span><span class="line"><span class="cl">	<span class="nx">prev</span> <span class="o">*</span><span class="nx">sudog</span>
</span></span><span class="line"><span class="cl">	<span class="nx">elem</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span> <span class="c1">// data element (may point to stack)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// The following fields are never accessed concurrently.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// For channels, waitlink is only accessed by g.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// For semaphores, all fields (including the ones above)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// are only accessed when holding a semaRoot lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">acquiretime</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">releasetime</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ticket</span>      <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// isSelect indicates g is participating in a select, so
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// g.selectDone must be CAS&#39;d to win the wake-up race.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">isSelect</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// success indicates whether communication over channel c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// succeeded. It is true if the goroutine was awoken because a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// value was delivered over channel c, and false if awoken
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// because c was closed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">success</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// waiters is a count of semaRoot waiting list other than head of list,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// clamped to a uint16 to fit in unused space.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Only meaningful at the head of the list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// (If we wanted to be overly clever, we could store a high 16 bits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// in the second entry in the list.)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">waiters</span> <span class="kt">uint16</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">parent</span>   <span class="o">*</span><span class="nx">sudog</span> <span class="c1">// semaRoot binary tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">waitlink</span> <span class="o">*</span><span class="nx">sudog</span> <span class="c1">// g.waiting list or semaRoot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">waittail</span> <span class="o">*</span><span class="nx">sudog</span> <span class="c1">// semaRoot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span>        <span class="o">*</span><span class="nx">hchan</span> <span class="c1">// channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>hchan</code> / <code>waitq</code> 的数据结构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">hchan</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">qcount</span>   <span class="kt">uint</span>           <span class="c1">// total data in the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dataqsiz</span> <span class="kt">uint</span>           <span class="c1">// size of the circular queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">buf</span>      <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span> <span class="c1">// points to an array of dataqsiz elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">elemsize</span> <span class="kt">uint16</span>
</span></span><span class="line"><span class="cl">	<span class="nx">closed</span>   <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">elemtype</span> <span class="o">*</span><span class="nx">_type</span> <span class="c1">// element type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sendx</span>    <span class="kt">uint</span>   <span class="c1">// send index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">recvx</span>    <span class="kt">uint</span>   <span class="c1">// receive index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">recvq</span>    <span class="nx">waitq</span>  <span class="c1">// list of recv waiters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sendq</span>    <span class="nx">waitq</span>  <span class="c1">// list of send waiters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// lock protects all fields in hchan, as well as several
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// fields in sudogs blocked on this channel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Do not change another G&#39;s status while holding this lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// (in particular, do not ready a G), as this can deadlock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// with stack shrinking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lock</span> <span class="nx">mutex</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">waitq</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">first</span> <span class="o">*</span><span class="nx">sudog</span>
</span></span><span class="line"><span class="cl">	<span class="nx">last</span>  <span class="o">*</span><span class="nx">sudog</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h4 id="场景-iii-net-read--recv">场景 III: Net read / recv</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Listen</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="s">&#34;:6633&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">conn</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Accept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">buf</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">n</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">n</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>函数 <code>conn.Read</code> 调用链如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="nx">conn</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">net</span><span class="p">.(</span><span class="o">*</span><span class="nx">conn</span><span class="p">).</span><span class="nf">Read</span><span class="p">(</span><span class="nx">b</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">net</span><span class="p">.(</span><span class="o">*</span><span class="nx">netFD</span><span class="p">).</span><span class="nf">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">poll</span><span class="p">.(</span><span class="o">*</span><span class="nx">FD</span><span class="p">).</span><span class="nf">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">poll</span><span class="p">.(</span><span class="o">*</span><span class="nx">pollDesc</span><span class="p">).</span><span class="nf">waitRead</span><span class="p">(</span><span class="nx">isFile</span> <span class="kt">bool</span><span class="p">)</span> <span class="kt">error</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nx">poll</span><span class="p">.(</span><span class="o">*</span><span class="nx">pollDesc</span><span class="p">).</span><span class="nf">wait</span><span class="p">(</span><span class="nx">mode</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">isFile</span> <span class="kt">bool</span><span class="p">)</span> <span class="kt">error</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">runtime</span><span class="p">.</span><span class="nf">poll_runtime_pollWait</span><span class="p">(</span><span class="nx">pd</span> <span class="o">*</span><span class="nx">pollDesc</span><span class="p">,</span> <span class="nx">mode</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="nx">runtime</span><span class="p">.</span><span class="nf">netpollblock</span><span class="p">(</span><span class="nx">pd</span> <span class="o">*</span><span class="nx">pollDesc</span><span class="p">,</span> <span class="nx">mode</span> <span class="kt">int32</span><span class="p">,</span> <span class="nx">waitio</span> <span class="kt">bool</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">gpp</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">pd</span><span class="p">.</span><span class="nx">rg</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">mode</span> <span class="o">==</span> <span class="sc">&#39;w&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nx">gpp</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">pd</span><span class="p">.</span><span class="nx">wg</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="o">...</span>
</span></span><span class="line"><span class="cl">                <span class="nf">gopark</span><span class="p">(</span><span class="nx">netpollblockcommit</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">gpp</span><span class="p">),</span> <span class="nx">waitReasonIOWait</span><span class="p">,</span> <span class="nx">traceBlockNet</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">...</span>
</span></span><span class="line"><span class="cl">              <span class="p">}</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nf">gopark</span><span class="p">(</span><span class="nx">unlockf</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">lock</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">reason</span> <span class="nx">waitReason</span><span class="p">,</span> <span class="nx">traceReason</span> <span class="nx">traceBlockReason</span><span class="p">,</span> <span class="nx">traceskip</span> <span class="kt">int</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>函数 <code>conn.Write</code> 调用链如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="nx">conn</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">net</span><span class="p">.(</span><span class="o">*</span><span class="nx">conn</span><span class="p">).</span><span class="nf">Write</span><span class="p">(</span><span class="nx">b</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">net</span><span class="p">.(</span><span class="o">*</span><span class="nx">netFD</span><span class="p">).</span><span class="nf">Write</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">poll</span><span class="p">.(</span><span class="o">*</span><span class="nx">FD</span><span class="p">).</span><span class="nf">Write</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">poll</span><span class="p">.(</span><span class="o">*</span><span class="nx">pollDesc</span><span class="p">).</span><span class="nf">waitWrite</span><span class="p">(</span><span class="nx">isFile</span> <span class="kt">bool</span><span class="p">)</span> <span class="kt">error</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nx">poll</span><span class="p">.(</span><span class="o">*</span><span class="nx">pollDesc</span><span class="p">).</span><span class="nf">wait</span><span class="p">(</span><span class="nx">mode</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">isFile</span> <span class="kt">bool</span><span class="p">)</span> <span class="kt">error</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">runtime</span><span class="p">.</span><span class="nf">poll_runtime_pollWait</span><span class="p">(</span><span class="nx">pd</span> <span class="o">*</span><span class="nx">pollDesc</span><span class="p">,</span> <span class="nx">mode</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="nx">runtime</span><span class="p">.</span><span class="nf">netpollblock</span><span class="p">(</span><span class="nx">pd</span> <span class="o">*</span><span class="nx">pollDesc</span><span class="p">,</span> <span class="nx">mode</span> <span class="kt">int32</span><span class="p">,</span> <span class="nx">waitio</span> <span class="kt">bool</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">gpp</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">pd</span><span class="p">.</span><span class="nx">rg</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">mode</span> <span class="o">==</span> <span class="sc">&#39;w&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nx">gpp</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">pd</span><span class="p">.</span><span class="nx">wg</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="o">...</span>
</span></span><span class="line"><span class="cl">                <span class="nf">gopark</span><span class="p">(</span><span class="nx">netpollblockcommit</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">gpp</span><span class="p">),</span> <span class="nx">waitReasonIOWait</span><span class="p">,</span> <span class="nx">traceBlockNet</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">...</span>
</span></span><span class="line"><span class="cl">              <span class="p">}</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nf">gopark</span><span class="p">(</span><span class="nx">unlockf</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">lock</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">reason</span> <span class="nx">waitReason</span><span class="p">,</span> <span class="nx">traceReason</span> <span class="nx">traceBlockReason</span><span class="p">,</span> <span class="nx">traceskip</span> <span class="kt">int</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>有关 <code>net.Conn</code> 读写详细内容，可参考<a href="https://lutianen.github.io/netpoll-of-network-program-for-golang/" target="_blank" rel="noopener noreffer ">Netpoll of Network Program for Golang</a></p>
<hr>
<h4 id="场景-iv-锁阻塞">场景 IV: 锁阻塞</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">mtx</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mtx</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">mtx</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Start\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;End\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span> <span class="c1">// Ensure child goroutine gets the mutex before main goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Try to acquire mutex\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mtx</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Main goroutine\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mtx</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>函数 <code>mtx.Lock()</code> 调用链如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="nx">mtx</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sync</span><span class="p">.(</span><span class="o">*</span><span class="nx">Mutex</span><span class="p">).</span><span class="nf">Lock</span><span class="p">()</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sync</span><span class="p">.(</span><span class="o">*</span><span class="nx">Mutex</span><span class="p">)</span> <span class="nf">lockSlow</span><span class="p">()</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sync</span><span class="p">.</span><span class="nf">runtime_SemacquireMutex</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="kt">uint32</span><span class="p">,</span> <span class="nx">lifo</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">skipframes</span> <span class="kt">int</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">				<span class="nx">sync</span><span class="p">.</span><span class="nf">sync_runtime_SemacquireMutex</span><span class="p">(</span><span class="nx">addr</span> <span class="o">*</span><span class="kt">uint32</span><span class="p">,</span> <span class="nx">lifo</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">skipframes</span> <span class="kt">int</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">					<span class="nx">runtime</span><span class="p">.</span><span class="nf">semacquire1</span><span class="p">(</span><span class="nx">addr</span> <span class="o">*</span><span class="kt">uint32</span><span class="p">,</span> <span class="nx">lifo</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">profile</span> <span class="nx">semaProfileFlags</span><span class="p">,</span> <span class="nx">skipframes</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">reason</span> <span class="nx">waitReason</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">gp</span> <span class="o">:=</span> <span class="nf">getg</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="nx">gp</span> <span class="o">!=</span> <span class="nx">gp</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">curg</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nf">throw</span><span class="p">(</span><span class="s">&#34;semacquire not on the G stack&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="c1">// Easy case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="k">if</span> <span class="nf">cansemacquire</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="k">return</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="c1">// Harder case:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="c1">//	increment waiter count
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="c1">//	try cansemacquire one more time, return if succeeded
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="c1">//	enqueue itself as a waiter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="c1">//	sleep
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="c1">//	(waiter descriptor is dequeued by signaler)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="nx">s</span> <span class="o">:=</span> <span class="nf">acquireSudog</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">						<span class="nx">root</span> <span class="o">:=</span> <span class="nx">semtable</span><span class="p">.</span><span class="nf">rootFor</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">						<span class="o">...</span>
</span></span><span class="line"><span class="cl">							<span class="c1">// Any semrelease after the cansemacquire knows we&#39;re waiting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>							<span class="c1">// (we set nwait above), so go to sleep.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>							<span class="nx">root</span><span class="p">.</span><span class="nf">queue</span><span class="p">(</span><span class="nx">addr</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">lifo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">							<span class="nf">goparkunlock</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">root</span><span class="p">.</span><span class="nx">lock</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">traceBlockSync</span><span class="p">,</span> <span class="mi">4</span><span class="o">+</span><span class="nx">skipframes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">							<span class="o">...</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">						<span class="nf">goparkunlock</span><span class="p">(</span><span class="nx">lock</span> <span class="o">*</span><span class="nx">mutex</span><span class="p">,</span> <span class="nx">reason</span> <span class="nx">waitReason</span><span class="p">,</span> <span class="nx">traceReason</span> <span class="nx">traceBlockReason</span><span class="p">,</span> <span class="nx">traceskip</span> <span class="kt">int</span><span class="p">)</span> <span class="o">---</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">							<span class="nf">gopark</span><span class="p">(</span><span class="nx">unlockf</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">)</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">lock</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">,</span> <span class="nx">reason</span> <span class="nx">waitReason</span><span class="p">,</span> <span class="nx">traceReason</span> <span class="nx">traceBlockReason</span><span class="p">,</span> <span class="nx">traceskip</span> <span class="kt">int</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>相关数据结构: <code>semTable</code> 表现为大小为 251 的数组，其中 <code>semTable</code> 中的每一个元素都是一个具有不同地址的 sudog 平衡树.</p>
<p>这些 sudog 中的每一个都可以依次指向（通过 s.waitlink）等待同一地址的其他 sudog 的链表.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// Asynchronous semaphore for sync.Mutex.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A semaRoot holds a balanced tree of sudog with distinct addresses (s.elem).
</span></span></span><span class="line"><span class="cl"><span class="c1">// Each of those sudog may in turn point (through s.waitlink) to a list
</span></span></span><span class="line"><span class="cl"><span class="c1">// of other sudogs waiting on the same address.
</span></span></span><span class="line"><span class="cl"><span class="c1">// The operations on the inner lists of sudogs with the same address
</span></span></span><span class="line"><span class="cl"><span class="c1">// are all O(1). The scanning of the top-level semaRoot list is O(log n),
</span></span></span><span class="line"><span class="cl"><span class="c1">// where n is the number of distinct addresses with goroutines blocked
</span></span></span><span class="line"><span class="cl"><span class="c1">// on them that hash to the given semaRoot.
</span></span></span><span class="line"><span class="cl"><span class="c1">// See golang.org/issue/17953 for a program that worked badly
</span></span></span><span class="line"><span class="cl"><span class="c1">// before we introduced the second level of list, and
</span></span></span><span class="line"><span class="cl"><span class="c1">// BenchmarkSemTable/OneAddrCollision/* for a benchmark that exercises this.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">semaRoot</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lock</span>  <span class="nx">mutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">treap</span> <span class="o">*</span><span class="nx">sudog</span>        <span class="c1">// root of balanced tree of unique waiters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nwait</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">Uint32</span> <span class="c1">// Number of waiters. Read w/o the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Prime to not correlate with any user patterns.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">const</span> <span class="nx">semTabSize</span> <span class="p">=</span> <span class="mi">251</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">semTable</span> <span class="p">[</span><span class="nx">semTabSize</span><span class="p">]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">root</span> <span class="nx">semaRoot</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pad</span>  <span class="p">[</span><span class="nx">cpu</span><span class="p">.</span><span class="nx">CacheLinePadSize</span> <span class="o">-</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Sizeof</span><span class="p">(</span><span class="nx">semaRoot</span><span class="p">{})]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure>
</figure>

<h3 id="runtime-不可拦截-goroutine-阻塞场景解析">runtime 不可拦截 goroutine 阻塞场景解析</h3>
<p><code>time.Sleep</code> / <code>channel send</code> / <code>channel recv</code> / <code>select</code> / <code>net read</code> / <code>net write</code> / <code>sync.Mutex</code> 等阻塞场景可被 runtime 拦截，然而仍存在一些阻塞情况是 runtime 无法拦截的，例如：<strong>在执行 C 代码或阻塞在 syscall 上时，必须占用一个线程</strong>。</p>
<hr>
<h2 id="iii-sysmon">III. Sysmon</h2>
<p>system monitor，高优先级，在专有线程中执行，不需要绑定 <code>p</code>.</p>
<hr>
<h2 id="iv-summary">IV. Summary</h2>
<ul>
<li>Runtime 构成：<strong>Scheduler</strong>、<strong>Netpoll</strong>、<strong>内存管理</strong>、<strong>垃圾回收</strong></li>
<li>GMP：M - 任务消费者；G - 计算任务；P - 可以使用 CPU 的 token</li>
<li>GMP 中的队列抽象：P 的本地 runnext 字段 &ndash;&raquo; P 的 local run queue &ndash;&raquo; global run queue；采用多级队列减少锁竞争</li>
<li>调度循环：线程 M 在持有 P 的情况下不断消费运行队列中的 G 的过程</li>
<li>处理阻塞：
<ul>
<li>runtime 可以接管的阻塞：
<ul>
<li>channel send / recv，sync.Mutex，net read / write，select，time.Sleep</li>
<li>所有 runtime 可接管的阻塞都是通过 <code>gopark</code> / <code>goparkunlock</code> 挂起，<code>goready</code> 恢复</li>
</ul>
</li>
<li>runtime 不可接管的阻塞：syscall，cgo，长时间运行需要剥离 P 执行；</li>
</ul>
</li>
<li>sysmon：
<ul>
<li>一个后台高级优先级循环，执行时不需要绑定任何的 P</li>
<li>负责：
<ul>
<li>检查是否已经没有活动线程，如果是则崩溃</li>
<li>轮询 netpoll</li>
<li>剥离在 syscall 上阻塞的 M 的 P</li>
<li>发信号，抢占已经执行时间过长的 G</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="v-q--a">V. Q &amp; A</h2>
<ol>
<li>
<p>为什么阻塞等待的 goroutine，有时表现为 <code>g</code> 有时表现为 <code>sudog</code> ？</p>
<ul>
<li><code>sudog</code> (pseudo-g) 表示等待列表中的 <code>g</code>，例如用于在 channel 上的 <code>send</code>/<code>recv</code>.</li>
<li><code>g</code> 与同步对象是多对多的关系: 一个 <code>g</code> 可以出现在多个等待列表中，因此一个 <code>g</code> 可能有多个 <code>sudog</code>；</li>
<li>很多 <code>g</code> 可能在等待同一个同步对象，因此一个对象可能有很多 <code>sudog</code></li>
<li>
<blockquote>
<p>一个 <code>g</code> 可能对应多个 <code>sudog</code>，比如一个 <code>g</code> 会同时 <code>select</code> 多个 channel</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="vi-reference">VI. Reference</h2>
<ul>
<li><a href="https://www.yuque.com/aceld/golang/srxd6d#0810e304" target="_blank" rel="noopener noreffer ">Golang的协程调度器原理及GMP设计思想</a></li>
<li><a href="https://www.figma.com/proto/gByIPDf4nRr6No4dNYjn3e/bootstrap?page-id=242%3A7&amp;node-id=242%3A215&amp;viewport=516%2C209%2C0.07501539587974548&amp;scaling=scale-down-width" target="_blank" rel="noopener noreffer ">Golang 生产-消费调度流程: Producer</a></li>
<li><a href="https://www.figma.com/proto/gByIPDf4nRr6No4dNYjn3e/bootstrap?page-id=143%3A212&amp;node-id=143%3A213&amp;viewport=134%2C83%2C0.06213996931910515&amp;scaling=scale-down-width" target="_blank" rel="noopener noreffer ">Golang 生产-消费调度流程: Consumer</a></li>
<li><a href="https://xargin.com/shrink-go-threads/" target="_blank" rel="noopener noreffer ">极端情况下收缩 Go 的线程数</a></li>
<li><a href="https://github.com/golang-design/history#scheduler" target="_blank" rel="noopener noreffer ">Go Scheduler 变更史</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.10/src/internal/poll/fd_poll_runtime.go" target="_blank" rel="noopener noreffer ">internal/poll/fd_poll_runtime.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.10/src/internal/poll/fd_unix.go" target="_blank" rel="noopener noreffer ">internal/poll/fd_unix.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.10/src/net/fd_unix.go" target="_blank" rel="noopener noreffer ">net/fd_unix.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/runtime2.go" target="_blank" rel="noopener noreffer ">runtime/runtime2.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/time.go" target="_blank" rel="noopener noreffer ">runtime/time.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/proc.go" target="_blank" rel="noopener noreffer ">runtime/proc.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/netpoll.go" target="_blank" rel="noopener noreffer ">runtime/netpoll.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/netpoll_epoll.go" target="_blank" rel="noopener noreffer ">runtime/netpoll_epoll.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/sema.go" target="_blank" rel="noopener noreffer ">runtime/sema.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/sync/mutex.go" target="_blank" rel="noopener noreffer ">sync/mutex.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/time/sleep.go" target="_blank" rel="noopener noreffer ">time/sleep.go</a></li>
</ul>]]></description>
</item>
<item>
    <title>Golang Netpoll</title>
    <link>https://kydance.github.io/posts/golang-netpoll/</link>
    <pubDate>Wed, 08 May 2024 11:43:38 &#43;0800</pubDate>
    <author>kyden</author>
    <guid>https://kydance.github.io/posts/golang-netpoll/</guid>
    <description><![CDATA[<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw" aria-hidden="true"></i>导语<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">深入剖析 Golang 网络编程之 Netpoll，主要涉及 Linux 环境下的 Epoll 初始化、 Go 网络编程基本流程（Listen、Accept、Read、Write）以及netpoll 执行流程</div>
        </div>
    </div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Golang 源码版本<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本文所涉及的源码版本：<a href="https://github.com/golang/go/tree/release-branch.go1.22/src" target="_blank" rel="noopener noreffer ">v1.22.3</a></div>
        </div>
    </div>
<h2 id="i-基础概念">I. 基础概念</h2>
<p><strong>网络编程，是允许不同计算机上的程序通过网络通信的开发过程，涉及多种协议（HTTP、TCP/IP等）以及不同编程语言的应用</strong>。</p>
<h3 id="同步异步并发模型">同步、异步、并发模型</h3>
<table>
<thead>
<tr>
<th>IO 模型</th>
<th style="text-align:left">读写操作和阻塞阶段</th>
</tr>
</thead>
<tbody>
<tr>
<td>阻塞 IO</td>
<td style="text-align:left">程序阻塞于读写函数</td>
</tr>
<tr>
<td>IO 复用</td>
<td style="text-align:left">程序阻塞于 IO 复用系统调用，但可同时监听多个 IO 事件；对 IO 本身的读写操作是非阻塞的</td>
</tr>
<tr>
<td>SIGIO 信号</td>
<td style="text-align:left">信号触发读写就绪事件，用户程序执行读写操作；程序本身没有阻塞阶段</td>
</tr>
<tr>
<td>异步 IO</td>
<td style="text-align:left">内核执行读写操作并触发读写完成事件；程序没有阻塞阶段</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>主要用于区分内核向应用程序通知的是何种 IO 事件（就绪事件 or 完成事件），以及由谁来完成 IO 读写（应用程序 or 内核）</strong></p>
</blockquote>
<h4 id="io模型中的同步">IO模型中的同步</h4>
<ul>
<li><strong>同步</strong> IO 模型，指的是应用程序发起 IO 操作后，必须等待 IO 操作完成后才能继续执行后续的操作，即 IO 操作的结果需要立即返回给应用程序；在此期间，应用程序处于阻塞状态，无法做其他操作。</li>
<li>优点：编程模型简单</li>
<li>缺点：效率较低（应用程序的执行速度被 IO 操作所限制）</li>
</ul>
<blockquote>
<p><strong>对于操作系统内核来说，同步 IO 操作是指在内核处理 IO 请求时需要等待</strong></p>
</blockquote>
<h4 id="io-模型中的异步">IO 模型中的异步</h4>
<ul>
<li><strong>异步</strong> IO 模型，指的是应用程序发起 IO 操作后，无须等待 IO 操作完成，可以立即进行后续的操作；在此期间，操作系统负责把 IO 操作的结果返回给应用程序；</li>
<li>优点：可以充分利用系统资源，提高 IO 操作的效率</li>
<li>缺点：编程模型相对复杂</li>
</ul>
<blockquote>
<p><strong>对于操作系统内核来说，异步 IO 操作指的是，在内核处理 IO 请求时无需等待，立即返回</strong></p>
</blockquote>
<h4 id="并发模式">并发模式</h4>
<blockquote>
<p><strong>并发模式，指的是 I/O 处理单元和多个逻辑单元之间协调完成任务的方法</strong></p>
</blockquote>
<h3 id="linux-epoll">Linux Epoll</h3>
<figure>
</figure>

<ul>
<li>
<p>epoll 在内核里使用<strong>红黑树(Red-black tree)来跟踪进程所有待检测的文件描述字 <code>fd</code></strong>，把需要监控的 socket 通过 <code>epoll_ctl()</code> 函数加入内核中的红黑树里（红黑树是个高效的数据结构，增删改一般时间复杂度是 <code>O(logn)</code>）</p>
</li>
<li>
<p>epoll 使用<strong>事件驱动</strong>的机制，在内核里<strong>维护了一个链表(List)来记录就绪事件</strong>。
当某个 socket 有事件发生时，内核通过<strong>回调函数</strong>将其加入到这个就绪事件列表中。
当用户调用 <code>epoll_wait()</code> 函数时，<strong>只</strong>会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率</p>
</li>
<li>
<p>两种触发模式</p>
<ul>
<li><strong>Level trigger</strong>：服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束</li>
<li><strong>Edge trigger</strong>：服务器端只会从 epoll_wait 中苏醒一次</li>
</ul>
</li>
<li>
<p>事件宏</p>
<ul>
<li><code>EPOLLIN</code> 表示对应的文件描述符<strong>可读（包括对端 socket 正常关闭）</strong></li>
<li><code>EPOLLOUT</code> 表示对应的文件描述符<strong>可写</strong></li>
<li><code>EPOLLPRI</code> 表示对应的文件描述符<strong>有紧急的数据可读（带外数据）</strong></li>
<li><code>EPOLLERR</code> 表示对应的文件描述符<strong>发生错误</strong></li>
<li><code>EPOLLHUP</code> 表示对应的文件描述符<strong>被挂断</strong></li>
<li><code>EPOLLET</code> 将 EPOLL 设为<strong>边缘触发模式</strong>（默认电平触发）</li>
<li><code>EPOLLONESHOT</code> <strong>只监听一次事件</strong>，当监听完这次事件之后，如果还需要继续监听这个 socket 的话，需要再次把这个 socket 加入到内核中的事件注册表中</li>
</ul>
</li>
</ul>
<h2 id="ii-应用示例">II. 应用示例</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Listen</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="s">&#34;127.0.0.1:2333&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">conn</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Accept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">conn</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="iii-相关数据结构">III. 相关数据结构</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// src/net/fd_fake.go
</span></span></span><span class="line"><span class="cl"><span class="c1">// Network file descriptor.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">netFD</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pfd</span> <span class="nx">poll</span><span class="p">.</span><span class="nx">FD</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// immutable until Close
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">family</span>      <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sotype</span>      <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">isConnected</span> <span class="kt">bool</span> <span class="c1">// handshake completed or use of association with peer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">net</span>         <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">laddr</span>       <span class="nx">Addr</span>
</span></span><span class="line"><span class="cl">	<span class="nx">raddr</span>       <span class="nx">Addr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// The only networking available in WASI preview 1 is the ability to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// sock_accept on a pre-opened socket, and then fd_read, fd_write,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// fd_close, and sock_shutdown on the resulting connection. We
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// intercept applicable netFD calls on this instance, and then pass
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the remainder of the netFD calls to fakeNetFD.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">*</span><span class="nx">fakeNetFD</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// poll.FD`: `src/internal/poll/fd_unix.go
</span></span></span><span class="line"><span class="cl"><span class="c1">// FD is a file descriptor. The net and os packages use this type as a
</span></span></span><span class="line"><span class="cl"><span class="c1">// field of a larger type representing a network connection or OS file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">FD</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Lock sysfd and serialize access to Read and Write methods.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fdmu</span> <span class="nx">fdMutex</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// System file descriptor. Immutable until Close.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Sysfd</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Platform dependent state of the file descriptor.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">SysFile</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// I/O poller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pd</span> <span class="nx">pollDesc</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Semaphore signaled when file is closed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">csema</span> <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Non-zero if this file has been set to blocking mode.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">isBlocking</span> <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Whether this is a streaming descriptor, as opposed to a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// packet-based descriptor like a UDP socket. Immutable.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">IsStream</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Whether a zero byte read indicates EOF. This is false for a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// message based socket connection.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ZeroReadIsEOF</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Whether this is a file rather than a network socket.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">isFile</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Addr represents a network end point address.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// The two methods [Addr.Network] and [Addr.String] conventionally return strings
</span></span></span><span class="line"><span class="cl"><span class="c1">// that can be passed as the arguments to [Dial], but the exact form
</span></span></span><span class="line"><span class="cl"><span class="c1">// and meaning of the strings is up to the implementation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Addr</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Network</span><span class="p">()</span> <span class="kt">string</span> <span class="c1">// name of the network (for example, &#34;tcp&#34;, &#34;udp&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">String</span><span class="p">()</span> <span class="kt">string</span>  <span class="c1">// string form of address (for example, &#34;192.0.2.1:25&#34;, &#34;[2001:db8::1]:80&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// fdMutex is a specialized synchronization primitive that manages
</span></span></span><span class="line"><span class="cl"><span class="c1">// lifetime of an fd and serializes access to Read, Write and Close
</span></span></span><span class="line"><span class="cl"><span class="c1">// methods on FD.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">fdMutex</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">state</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rsema</span> <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wsema</span> <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SysFile</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Writev cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">iovecs</span> <span class="o">*</span><span class="p">[]</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">Iovec</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">pollDesc</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">runtimeCtx</span> <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过源码可以看到，Golang 网络编程涉及到的 <code>netFD</code>, <code>poll.FD</code>, <code>Addr</code>, <code>SysFile</code> 以及 <code>pollDesc</code> 之间的关系如下：</p>
<ul>
<li><code>fdmu</code> 是为了保证对同一个文件的读、写操作能分别被序列化</li>
<li><code>Sysfd</code> 就是操作系统中 <code>syscall</code> 返回的 fd 值</li>
<li><code>pd</code>，<code>pollDesc</code> I/O poller，是 Go 对 poll 过程的一个抽象，所有平台的抽象都是一样的</li>
<li><code>csema</code>，当文件被关闭时会被触发</li>
<li><code>isBlocking</code> 表明 FD 是否为 blocking 模式</li>
<li><code>IsStream</code> 标志该 FD 是否是流式，与流式相反的是基于 packet 的，即 UDP socket</li>
<li><code>ZeroReadIsEOF</code>，当连接读到 0 长度时，用来区分是否代表 EOF. 如果是基于 packet 的 socket 连接，则始终是 <code>false</code></li>
<li><code>isFile</code> 标志该 FD 是否代表文件，还是网络连接</li>
<li><strong><code>netFD</code> 结构中包含一个 <code>poll.FD</code> 类型的成员 <code>pfd</code>，以及 <code>Addr</code> 接口类型的 <code>laddr</code> 和 <code>raddr</code></strong></li>
<li><strong><code>poll.FD</code> 结构含有 <code>SysFile</code> 和 <code>pollDesc</code> 类型的成员，以及 <code>fdMutex</code> 类型的 <code>fdmu</code></strong></li>
</ul>
<h2 id="iv-tcp-网络编程基本流程">IV. TCP 网络编程基本流程</h2>
<p>本部分涉及众多函数调用，为了描述清晰，采用了图的形式，其中，每一块第一行表示该块所表示的函数名称，其他部分表示该函数中关键函数调用。</p>
<h3 id="创建-tcp-socket-并监听-netlisten">创建 TCP socket 并监听: <code>net.Listen</code></h3>
<figure>
</figure>

<blockquote>
<p>NOTE</p>
<p><strong>需要注意的是，在执行 <code>net.(*netFD).listenStream</code> 之前，由于 <code>maxListenerBacklog</code> 函数调用了 <code>open(&quot;/proc/sys/net/core/somaxconn&quot;)</code>，则会导致 epoll 底层红黑树的提前创建: <code>runtime.netpollinit</code> -&gt; <code>syscall.EpollCreate1</code> -&gt; <code>Syscall6(SYS_EPOLL_CREATE1, uintptr(flags), 0, 0, 0, 0, 0)</code></strong>.</p>
<p>另外，当启用 Timer 时，也存在提前初始化 netpoll 的可能，原因：
<strong>Timers rely on the network poller</strong></p>
<p><code>time.NewTimer</code> -&gt; <code>runtime.startTimer</code> -&gt; <code>runtime.addtimer</code> -&gt; <code>runtime.doaddtimer</code> -&gt; <code>netpollGenericInit()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// doaddtimer adds t to the current P&#39;s heap.
</span></span></span><span class="line"><span class="cl"><span class="c1">// The caller must have locked the timers for pp.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">doaddtimer</span><span class="p">(</span><span class="nx">pp</span> <span class="o">*</span><span class="nx">p</span><span class="p">,</span> <span class="nx">t</span> <span class="o">*</span><span class="nx">timer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Timers rely on the network poller, so make sure the poller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// has started.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">netpollInited</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">netpollGenericInit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<h3 id="获取-tcp-连接-nettcplisteneraccept">获取 TCP 连接: <code>net.(*TCPListener).Accept</code></h3>
<figure>
</figure>

<h3 id="tcp-连接读数据-nettcpconnread">TCP 连接读数据: <code>net.(*TCPConn).Read</code></h3>
<figure>
</figure>

<h3 id="tcp-连接写数据-nettcpconnwrite">TCP 连接写数据: <code>net.(*TCPConn).Write</code></h3>
<figure>
</figure>

<h2 id="v-netpoll-执行流程-netpoll">V. netpoll 执行流程: <code>netpoll</code></h2>
<p>在调度和 GC 的关键点上都会检查一次 netpoll，确定是否存在 ready 状态的 FD：</p>
<ul>
<li>
<p><code>startTheWorldWithSema</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// reason is the same STW reason passed to stopTheWorld. start is the start
</span></span></span><span class="line"><span class="cl"><span class="c1">// time returned by stopTheWorld.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// now is the current time; prefer to pass 0 to capture a fresh timestamp.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// stattTheWorldWithSema returns now.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">startTheWorldWithSema</span><span class="p">(</span><span class="nx">now</span> <span class="kt">int64</span><span class="p">,</span> <span class="nx">w</span> <span class="nx">worldStop</span><span class="p">)</span> <span class="kt">int64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">assertWorldStopped</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">mp</span> <span class="o">:=</span> <span class="nf">acquirem</span><span class="p">()</span> <span class="c1">// disable preemption because it can be holding p in a local var
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nf">netpollinited</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">list</span><span class="p">,</span> <span class="nx">delta</span> <span class="o">:=</span> <span class="nf">netpoll</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// non-blocking
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">injectglist</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">netpollAdjustWaiters</span><span class="p">(</span><span class="nx">delta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sched</span><span class="p">.</span><span class="nx">lock</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">procs</span> <span class="o">:=</span> <span class="nx">gomaxprocs</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">newprocs</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">procs</span> <span class="p">=</span> <span class="nx">newprocs</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newprocs</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span> <span class="o">:=</span> <span class="nf">procresize</span><span class="p">(</span><span class="nx">procs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sched</span><span class="p">.</span><span class="nx">gcwaiting</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">sysmonwait</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sched</span><span class="p">.</span><span class="nx">sysmonwait</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">notewakeup</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sched</span><span class="p">.</span><span class="nx">sysmonnote</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sched</span><span class="p">.</span><span class="nx">lock</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">worldStarted</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>findrunnable</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// Finds a runnable goroutine to execute.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Tries to steal from other P&#39;s, get g from local or global queue, poll network.
</span></span></span><span class="line"><span class="cl"><span class="c1">// tryWakeP indicates that the returned goroutine is not normal (GC worker, trace
</span></span></span><span class="line"><span class="cl"><span class="c1">// reader) so the caller should try to wake a P.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">findRunnable</span><span class="p">()</span> <span class="p">(</span><span class="nx">gp</span> <span class="o">*</span><span class="nx">g</span><span class="p">,</span> <span class="nx">inheritTime</span><span class="p">,</span> <span class="nx">tryWakeP</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Poll network until next timer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nf">netpollinited</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nf">netpollAnyWaiters</span><span class="p">()</span> <span class="o">||</span> <span class="nx">pollUntil</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">lastpoll</span><span class="p">.</span><span class="nf">Swap</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sched</span><span class="p">.</span><span class="nx">pollUntil</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="nx">pollUntil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">mp</span><span class="p">.</span><span class="nx">p</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">throw</span><span class="p">(</span><span class="s">&#34;findrunnable: netpoll with p&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">mp</span><span class="p">.</span><span class="nx">spinning</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">throw</span><span class="p">(</span><span class="s">&#34;findrunnable: netpoll with spinning&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">delay</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">pollUntil</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">now</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">now</span> <span class="p">=</span> <span class="nf">nanotime</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">delay</span> <span class="p">=</span> <span class="nx">pollUntil</span> <span class="o">-</span> <span class="nx">now</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">delay</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">delay</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">faketime</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// When using fake time, just poll.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">delay</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">list</span><span class="p">,</span> <span class="nx">delta</span> <span class="o">:=</span> <span class="nf">netpoll</span><span class="p">(</span><span class="nx">delay</span><span class="p">)</span> <span class="c1">// block until new work is available
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>pollWork</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// pollWork reports whether there is non-background work this P could
</span></span></span><span class="line"><span class="cl"><span class="c1">// be doing. This is a fairly lightweight check to be used for
</span></span></span><span class="line"><span class="cl"><span class="c1">// background work loops, like idle GC. It checks a subset of the
</span></span></span><span class="line"><span class="cl"><span class="c1">// conditions checked by the actual scheduler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">pollWork</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">runqsize</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span> <span class="o">:=</span> <span class="nf">getg</span><span class="p">().</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nf">ptr</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nf">runqempty</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nf">netpollinited</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nf">netpollAnyWaiters</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">lastpoll</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">list</span><span class="p">,</span> <span class="nx">delta</span> <span class="o">:=</span> <span class="nf">netpoll</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="p">!</span><span class="nx">list</span><span class="p">.</span><span class="nf">empty</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">injectglist</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nf">netpollAdjustWaiters</span><span class="p">(</span><span class="nx">delta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>sysmon</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// Always runs without a P, so write barriers are not allowed.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">//go:nowritebarrierrec
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">sysmon</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nf">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sched</span><span class="p">.</span><span class="nx">sysmonlock</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Update now in case we blocked on sysmonnote or spent a long time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// blocked on schedlock or sysmonlock above.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">now</span> <span class="p">=</span> <span class="nf">nanotime</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// trigger libc interceptors if needed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="o">*</span><span class="nx">cgo_yield</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">asmcgocall</span><span class="p">(</span><span class="o">*</span><span class="nx">cgo_yield</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// poll network if not polled for more than 10ms
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lastpoll</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">lastpoll</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nf">netpollinited</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nx">lastpoll</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">lastpoll</span><span class="o">+</span><span class="mi">10</span><span class="o">*</span><span class="mi">1000</span><span class="o">*</span><span class="mi">1000</span> <span class="p">&lt;</span> <span class="nx">now</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sched</span><span class="p">.</span><span class="nx">lastpoll</span><span class="p">.</span><span class="nf">CompareAndSwap</span><span class="p">(</span><span class="nx">lastpoll</span><span class="p">,</span> <span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">list</span><span class="p">,</span> <span class="nx">delta</span> <span class="o">:=</span> <span class="nf">netpoll</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// non-blocking - returns list of goroutines
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">list</span><span class="p">.</span><span class="nf">empty</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Need to decrement number of idle locked M&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// (pretending that one more is running) before injectglist.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// Otherwise it can lead to the following situation:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// injectglist grabs all P&#39;s but before it starts M&#39;s to run the P&#39;s,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// another M returns from syscall, finishes running its G,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// observes that there is no work to do and no other running M&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// and reports deadlock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nf">incidlelocked</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nf">injectglist</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nf">incidlelocked</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nf">netpollAdjustWaiters</span><span class="p">(</span><span class="nx">delta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>根据 ready 的事件时 Read 或 Write，分别从 poolDesc 的 rg、wg 上获取该唤醒的 goroutine.
然后将已经 ready 的 goroutine push 到 toRun 链表，并且 toRun 链表最终会从 <code>netpoll()</code> 返回，通过 <code>injectglist</code> 进入全局队列.</p>
<blockquote>
<p>相当于每次调度循环都要执行 netpoll，检查频率还是比较高的</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// netpoll checks for ready network connections.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns list of goroutines that become runnable.
</span></span></span><span class="line"><span class="cl"><span class="c1">// delay &lt; 0: blocks indefinitely
</span></span></span><span class="line"><span class="cl"><span class="c1">// delay == 0: does not block, just polls
</span></span></span><span class="line"><span class="cl"><span class="c1">// delay &gt; 0: block for up to that many nanoseconds
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">netpoll</span><span class="p">(</span><span class="nx">delay</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">(</span><span class="nx">gList</span><span class="p">,</span> <span class="kt">int32</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">epfd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">gList</span><span class="p">{},</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">waitms</span> <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">delay</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">waitms</span> <span class="p">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">delay</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">waitms</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">delay</span> <span class="p">&lt;</span> <span class="mf">1e6</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">waitms</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">delay</span> <span class="p">&lt;</span> <span class="mf">1e15</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">waitms</span> <span class="p">=</span> <span class="nb">int32</span><span class="p">(</span><span class="nx">delay</span> <span class="o">/</span> <span class="mf">1e6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// An arbitrary cap on how long to wait for a timer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 1e9 ms == ~11.5 days.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">waitms</span> <span class="p">=</span> <span class="mf">1e9</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">events</span> <span class="p">[</span><span class="mi">128</span><span class="p">]</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">EpollEvent</span>
</span></span><span class="line"><span class="cl"><span class="nx">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span><span class="p">,</span> <span class="nx">errno</span> <span class="o">:=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nf">EpollWait</span><span class="p">(</span><span class="nx">epfd</span><span class="p">,</span> <span class="nx">events</span><span class="p">[:],</span> <span class="nb">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">events</span><span class="p">)),</span> <span class="nx">waitms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">errno</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">errno</span> <span class="o">!=</span> <span class="nx">_EINTR</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">println</span><span class="p">(</span><span class="s">&#34;runtime: epollwait on fd&#34;</span><span class="p">,</span> <span class="nx">epfd</span><span class="p">,</span> <span class="s">&#34;failed with&#34;</span><span class="p">,</span> <span class="nx">errno</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nf">throw</span><span class="p">(</span><span class="s">&#34;runtime: netpoll failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// If a timed sleep was interrupted, just return to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// recalculate how long we should sleep now.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">waitms</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">gList</span><span class="p">{},</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">goto</span> <span class="nx">retry</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">toRun</span> <span class="nx">gList</span>
</span></span><span class="line"><span class="cl">	<span class="nx">delta</span> <span class="o">:=</span> <span class="nb">int32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nb">int32</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ev</span> <span class="o">:=</span> <span class="nx">events</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Events</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">*</span><span class="p">(</span><span class="o">**</span><span class="kt">uintptr</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Data</span><span class="p">))</span> <span class="o">==</span> <span class="o">&amp;</span><span class="nx">netpollBreakRd</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Events</span> <span class="o">!=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLIN</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">println</span><span class="p">(</span><span class="s">&#34;runtime: netpoll: break fd ready for&#34;</span><span class="p">,</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Events</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nf">throw</span><span class="p">(</span><span class="s">&#34;runtime: netpoll: break fd ready for something unexpected&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">delay</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// netpollBreak could be picked up by a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// nonblocking poll. Only read the byte
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// if blocking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="kd">var</span> <span class="nx">tmp</span> <span class="p">[</span><span class="mi">16</span><span class="p">]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">				<span class="nf">read</span><span class="p">(</span><span class="nb">int32</span><span class="p">(</span><span class="nx">netpollBreakRd</span><span class="p">),</span> <span class="nf">noescape</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="nb">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">tmp</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">				<span class="nx">netpollWakeSig</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">mode</span> <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Events</span><span class="o">&amp;</span><span class="p">(</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLIN</span><span class="p">|</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLRDHUP</span><span class="p">|</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLHUP</span><span class="p">|</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLERR</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">mode</span> <span class="o">+=</span> <span class="sc">&#39;r&#39;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">Events</span><span class="o">&amp;</span><span class="p">(</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLOUT</span><span class="p">|</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLHUP</span><span class="p">|</span><span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLERR</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">mode</span> <span class="o">+=</span> <span class="sc">&#39;w&#39;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">mode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tp</span> <span class="o">:=</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="nx">taggedPointer</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pd</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="nx">pollDesc</span><span class="p">)(</span><span class="nx">tp</span><span class="p">.</span><span class="nf">pointer</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tag</span> <span class="o">:=</span> <span class="nx">tp</span><span class="p">.</span><span class="nf">tag</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">pd</span><span class="p">.</span><span class="nx">fdseq</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span> <span class="o">==</span> <span class="nx">tag</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">pd</span><span class="p">.</span><span class="nf">setEventErr</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">Events</span> <span class="o">==</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">EPOLLERR</span><span class="p">,</span> <span class="nx">tag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">delta</span> <span class="o">+=</span> <span class="nf">netpollready</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">toRun</span><span class="p">,</span> <span class="nx">pd</span><span class="p">,</span> <span class="nx">mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">toRun</span><span class="p">,</span> <span class="nx">delta</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// netpollready is called by the platform-specific netpoll function.
</span></span></span><span class="line"><span class="cl"><span class="c1">// It declares that the fd associated with pd is ready for I/O.
</span></span></span><span class="line"><span class="cl"><span class="c1">// The toRun argument is used to build a list of goroutines to return
</span></span></span><span class="line"><span class="cl"><span class="c1">// from netpoll. The mode argument is &#39;r&#39;, &#39;w&#39;, or &#39;r&#39;+&#39;w&#39; to indicate
</span></span></span><span class="line"><span class="cl"><span class="c1">// whether the fd is ready for reading or writing or both.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// This returns a delta to apply to netpollWaiters.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// This may run while the world is stopped, so write barriers are not allowed.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">//go:nowritebarrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">netpollready</span><span class="p">(</span><span class="nx">toRun</span> <span class="o">*</span><span class="nx">gList</span><span class="p">,</span> <span class="nx">pd</span> <span class="o">*</span><span class="nx">pollDesc</span><span class="p">,</span> <span class="nx">mode</span> <span class="kt">int32</span><span class="p">)</span> <span class="kt">int32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">delta</span> <span class="o">:=</span> <span class="nb">int32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">rg</span><span class="p">,</span> <span class="nx">wg</span> <span class="o">*</span><span class="nx">g</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">mode</span> <span class="o">==</span> <span class="sc">&#39;r&#39;</span> <span class="o">||</span> <span class="nx">mode</span> <span class="o">==</span> <span class="sc">&#39;r&#39;</span><span class="o">+</span><span class="sc">&#39;w&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rg</span> <span class="p">=</span> <span class="nf">netpollunblock</span><span class="p">(</span><span class="nx">pd</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">delta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">mode</span> <span class="o">==</span> <span class="sc">&#39;w&#39;</span> <span class="o">||</span> <span class="nx">mode</span> <span class="o">==</span> <span class="sc">&#39;r&#39;</span><span class="o">+</span><span class="sc">&#39;w&#39;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span> <span class="p">=</span> <span class="nf">netpollunblock</span><span class="p">(</span><span class="nx">pd</span><span class="p">,</span> <span class="sc">&#39;w&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">delta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">rg</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">toRun</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">rg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">wg</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">toRun</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">wg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">delta</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="vi-总结">VI. 总结</h2>
<ol>
<li>
<p>Golang 通过对 Linux 内核提供的 <code>epoll</code> 实现进行封装，实现了<strong>同步编程异步执行</strong>的效果，其核心数据结构是 <code>netFD</code>，并将 <code>Sysfd</code> 与 <code>pollDesc</code> 结构绑定。
当某个 <code>netFD</code> 产生 <code>EAGAIN</code> 错误时，则当前 Goroutine 将会被存储到其对应的 <code>pollDesc</code> 中，同时 Goroutine 会 <code>gopark()</code>，直至这个 <code>netFD</code> 再次发生读写事件，会将此 Goroutine 设置为 ready 并放入 <code>toRun</code> 队列等待重新运行，而底层事件通知机制就是 epoll.</p>
</li>
<li>
<p>Golang 中 netpoll 的创建与初始化的可能来源：Timer、读文件、TCP Listen.</p>
</li>
<li>
<p>如下的调度和 GC 关键函数 <code>startTheWorldWithSema</code>、<code>findrunnable</code>、<code>pollWork</code>、<code>sysmon</code> 都会进行 <code>netpoll</code> 执行流程，检查是否存在 ready 状态的 FD.</p>
</li>
</ol>
<h2 id="vii-reference">VII. Reference</h2>
<ul>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/netpoll.go" target="_blank" rel="noopener noreffer ">runtime/netpoll.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.22/src/runtime/netpoll_epoll.go" target="_blank" rel="noopener noreffer ">runtime/netpoll_epoll.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.10/src/runtime/proc.go" target="_blank" rel="noopener noreffer ">runtime/proc.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.10/src/net/fd_unix.go" target="_blank" rel="noopener noreffer ">net/fd_unix.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.10/src/internal/poll/fd_poll_runtime.go" target="_blank" rel="noopener noreffer ">internal/poll/fd_poll_runtime.go</a></li>
<li><a href="https://github.com/golang/go/blob/release-branch.go1.10/src/internal/poll/fd_unix.go" target="_blank" rel="noopener noreffer ">internal/poll/fd_unix.go</a></li>
</ul>]]></description>
</item>
<item>
    <title>Golang Profile and Optimize</title>
    <link>https://kydance.github.io/posts/golang-profile/</link>
    <pubDate>Sat, 20 Apr 2024 20:39:50 &#43;0800</pubDate>
    <author>kyden</author>
    <guid>https://kydance.github.io/posts/golang-profile/</guid>
    <description><![CDATA[<p>Golang 常见的性能剖析 (Profile) 与优化 (Optimize)</p>
<h2 id="i-profile">I. Profile</h2>
<p>在进行 <strong>API 压测</strong>、<strong>全链路压测</strong>、<strong>线上生产环境被高峰流量打爆</strong>的过程中随时可能发生故障等问题，例如：</p>
<ul>
<li>CPU 占用过高，超过 90%；</li>
<li>内存爆掉，<a href="https://en.wikipedia.org/wiki/Out_of_memory" target="_blank" rel="noopener noreffer ">OOM(Out of memory)</a>；</li>
<li>Goroutine 数量过多，80W；</li>
<li>线程数超高；</li>
<li>延迟过高；</li>
</ul>
<p>在发生以上故障时，一般需要结合 <strong>pprof</strong> 寻找故障原因，并根据不同的情况选择不同的方案；</p>
<blockquote>
<p>线上一定要具有开启 <code>pprof</code> 的能力，如果考虑安全性，也要具有通过配置开启的能力；</p>
</blockquote>
<h3 id="压测时需要关注的服务指标">压测时需要关注的服务指标</h3>
<ul>
<li><strong>Request rate</strong>: The number of service requests per second.</li>
<li><strong>Errors</strong>: The number of request that failed.</li>
<li><strong>Duration</strong>: The time for requests to complete.</li>
<li><strong>Goroutine / Thread 数量</strong>: 如果 Goroutine 数量很多，需要关注这些 Goroutine 的执行情况.</li>
<li><strong>GC 频率</strong></li>
<li><strong>gctrace 的内容</strong>:</li>
<li><strong>GC 的 STW 时间</strong></li>
</ul>
<p>还有一些其他 Memstats 相关的其他指标，可以参考 <a href="https://github.com/prometheus/prometheus" target="_blank" rel="noopener noreffer ">Prometheus</a>.</p>
<h3 id="压测手段">压测手段</h3>
<ul>
<li><a href="https://github.com/wg/wrk" target="_blank" rel="noopener noreffer ">wrk</a>: a HTTP benchmarking tool</li>
<li><a href="https://github.com/giltene/wrk2" target="_blank" rel="noopener noreffer ">wrk2</a>: a HTTP benchmarking tool based mostly on wrk</li>
<li><a href="https://github.com/rakyll/hey" target="_blank" rel="noopener noreffer ">HEY</a>: a tiny program that sends some load to a web application.</li>
<li><a href="https://github.com/tsenart/vegeta" target="_blank" rel="noopener noreffer ">Vegate</a>: a versatile HTTP load testing tool built out of a need to drill HTTP services with a constant request rate.</li>
<li><a href="https://nghttp2.org/documentation/h2load-howto.html" target="_blank" rel="noopener noreffer ">h2load</a>: HTTP/2 benchmarking tool</li>
<li><a href="https://ghz.sh/" target="_blank" rel="noopener noreffer ">ghz</a>: gRPC benchmarking and load testing tool</li>
</ul>
<h3 id="pprof-应用实例">pprof 应用实例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_</span> <span class="s">&#34;net/http/pprof&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">quit</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;-</span> <span class="nx">quit</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8080&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">go</span> <span class="nf">f</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{}</span> <span class="c1">// Test
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">go tool pprof -http<span class="o">=</span>:9999 localhost:8080/debug/pprof/heap
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意事项</p>
<ol>
<li>测试代码中引入 <code>net/http/pprof</code> 包： <code>_ &quot;net/http/pprof&quot;</code></li>
<li>单独启动一个 Goroutine 开启监听(端口自定，例如这里是 8080)：<code>go func() { http.ListenAndServe(&quot;:8080&quot;, nil) }()</code></li>
<li><code>$ go tool pprof -http=:9999 localhost:8080/debug/pprof/heap</code></li>
</ol>
</blockquote>
<hr>
<h2 id="ii-optimize">II. Optimize</h2>
<h3 id="优化方向">优化方向</h3>
<figure>
</figure>

<p>在分析上图的应用程序运行过程，可以发现进行程序优化时，一般从可以从以下方面入手：</p>
<ul>
<li>应用层优化: 主要指的是逻辑优化、内存使用优化、CPU 使用优化、阻塞优化等，并且本层优化效果可能优于底层优化；</li>
<li>底层优化：GC优化、Go 标准库优化、Go runtime 优化等</li>
</ul>
<h3 id="基本优化流程">基本优化流程</h3>
<ol>
<li><strong>外部依赖</strong>：在监控系统中查看是否存在问题，例如依赖的上游服务 (DB/redis/MQ) 延迟过高；</li>
<li><strong>CPU 占用</strong>：通过查看 CPU profile 检查是否存在问题，优化占用 CPU 较多的部分逻辑；</li>
<li><strong>内存占用</strong>：看 Prometheus，内存 RSS / Goroutine 数量 / Goroutine 栈占用 &ndash;&raquo; 如果 Goroutine 数量不多，则重点关注 heap profile 中的 inuse &ndash;&raquo; 定时任务类需要看 alloc</li>
<li>Goroutine 数量过多 &ndash;&raquo; 从 profile 网页进去看看 Goroutine 的执行情况（在干什么？） &ndash;&raquo; 检查死锁、阻塞等问题 &ndash;&raquo; 个别不在意延迟的选择第三方库优化</li>
</ol>
<h3 id="常见优化场景">常见优化场景</h3>
<h4 id="字符串拼接">字符串拼接</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkConcat0</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">str</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">str</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">str</span> <span class="o">+=</span> <span class="s">&#34;userid : &#34;</span> <span class="o">+</span> <span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">str</span> <span class="o">+=</span> <span class="s">&#34;localtion : &#34;</span> <span class="o">+</span> <span class="s">&#34;ab&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkConcat1</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">str</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">str</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">str</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;userid : %v&#34;</span><span class="p">,</span> <span class="s">&#34;1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">str</span> <span class="o">+=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;localtion : %v&#34;</span><span class="p">,</span> <span class="s">&#34;ab&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go <span class="nb">test</span> -bench<span class="o">=</span>. -benchmem
</span></span><span class="line"><span class="cl">goos: linux
</span></span><span class="line"><span class="cl">goarch: amd64
</span></span><span class="line"><span class="cl">pkg: github.com/lutianen/go-test/bench0
</span></span><span class="line"><span class="cl">cpu: 11th Gen Intel<span class="o">(</span>R<span class="o">)</span> Core<span class="o">(</span>TM<span class="o">)</span> i7-11800H @ 2.30GHz
</span></span><span class="line"><span class="cl">BenchmarkConcat0-16     <span class="m">35702518</span>                32.86 ns/op           <span class="m">24</span> B/op          <span class="m">1</span> allocs/op
</span></span><span class="line"><span class="cl">BenchmarkConcat1-16      <span class="m">8105732</span>               140.9 ns/op            <span class="m">56</span> B/op          <span class="m">3</span> allocs/op
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">ok      github.com/lutianen/go-test/bench0      2.506s
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="逃逸分析">逃逸分析</h4>
<p>用户声明的对象，被放在栈上还是堆上？
可以通过编译器的 escape analysis 来决定 <code>go build -gcflags=&quot;-m&quot; xxx.go</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">sl</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">println</span><span class="p">(</span><span class="nx">sl</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">sl0</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">10240</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">println</span><span class="p">(</span><span class="nx">sl0</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go build -gcflags<span class="o">=</span><span class="s2">&#34;-m&#34;</span> main.go
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:3:6: can inline main
</span></span><span class="line"><span class="cl">./main.go:4:15: make<span class="o">([]</span>int, 1024<span class="o">)</span> does not escape
</span></span><span class="line"><span class="cl">./main.go:7:16: make<span class="o">([]</span>int, 10240<span class="o">)</span> escapes to heap
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>TODO: 各种逃逸分析的可能性有哪些？</p>
</blockquote>
<h4 id="trasval-2-d-matrix">Trasval 2-D Matrix</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">bench1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkHorizontal</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">arrLen</span> <span class="o">:=</span> <span class="mi">10000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">arr</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">arrLen</span><span class="p">,</span> <span class="nx">arrLen</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">arrLen</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">arrInternal</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">arrLen</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">arrLen</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">arrInternal</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">arrInternal</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">x</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="nx">x</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">y</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="nx">y</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">arr</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkVertical</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">arrLen</span> <span class="o">:=</span> <span class="mi">10000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">arr</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">arrLen</span><span class="p">,</span> <span class="nx">arrLen</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">arrLen</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">arrInternal</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">arrLen</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">arrLen</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">arrInternal</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">arrInternal</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">x</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="nx">x</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">y</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="nx">y</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">arr</span><span class="p">[</span><span class="nx">y</span><span class="p">][</span><span class="nx">x</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go <span class="nb">test</span> -bench<span class="o">=</span>. -benchmem
</span></span><span class="line"><span class="cl">goos: linux
</span></span><span class="line"><span class="cl">goarch: amd64
</span></span><span class="line"><span class="cl">pkg: github.com/lutianen/go-test/bench1
</span></span><span class="line"><span class="cl">cpu: 11th Gen Intel<span class="o">(</span>R<span class="o">)</span> Core<span class="o">(</span>TM<span class="o">)</span> i7-11800H @ 2.30GHz
</span></span><span class="line"><span class="cl">BenchmarkHorizontal-16                <span class="m">15</span>          <span class="m">71020410</span> ns/op        <span class="m">54629717</span> B/op        <span class="m">666</span> allocs/op
</span></span><span class="line"><span class="cl">BenchmarkVertical-16                   <span class="m">1</span>        <span class="m">1059649022</span> ns/op        <span class="m">819445856</span> B/op     <span class="m">10002</span> allocs/op
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">ok      github.com/lutianen/go-test/bench1      3.676s
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="zero-garbage--allocation">Zero Garbage / Allocation</h4>
<p>Zero Grabage 一般指的是通过利用 <code>sync.Pool</code> 将堆分配完全消灭的优化技术。</p>
<p>例如，在 http router 框架 <a href="https://github.com/valyala/fasthttp" target="_blank" rel="noopener noreffer ">fasthttp</a> 中应用较多.</p>
<figure>
</figure>

<h4 id="false-sharing">False Sharing</h4>
<figure>
</figure>

<p>CPU 运行过程中修改数据是一个 <strong>cache line</strong>为单位，当两个变量<code>A</code>/<code>B</code>满足以下条件：</p>
<ul>
<li>在内存中相邻</li>
<li>并发修改频繁</li>
</ul>
<p>那么，当 CPU0 修改变量 <code>A</code> 时，会导致 CPU1 中的变量 <code>B</code> 缓存失效。</p>
<p>解决方法，在定义数据结构中，填充一些 <code>padding</code> 用以满足该数据结构正好是 cache line 的整数倍；</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">NoPad</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">y</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">WithPad</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span> <span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="kt">uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">y</span> <span class="kt">uint64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>查看 cache line 大小：<code>cat /sys/devices/system/cpu/cpu&lt;core-num&gt;/cache/index0/coherency_line_size</code></p>
</blockquote>
<h4 id="降低外部命令调用频次">降低外部命令调用频次</h4>
<p>优化前：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">(</span><span class="nx">wr</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">uuid</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;uuidgen&#34;</span><span class="p">).</span><span class="nf">Output</span><span class="p">()</span> <span class="c1">// Use exec.Command
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">wr</span><span class="p">.</span><span class="nf">Header</span><span class="p">()[</span><span class="s">&#34;Content-Type&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;application/text&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">io</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">wr</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">uuid</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>优化后：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nx">uuid</span> <span class="s">&#34;github.com/satori/go.uuid&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">(</span><span class="nx">wr</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">uuid</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">uuid</span><span class="p">.</span><span class="nf">NewV4</span><span class="p">()</span> <span class="c1">// Replace exec.Command with existing library
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">wr</span><span class="p">.</span><span class="nf">Header</span><span class="p">()[</span><span class="s">&#34;Content-Type&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;application/text&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">io</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">wr</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>总结：</p>
<ol>
<li>线上使用 <code>exec</code> 命令是非常危险的</li>
<li>采用第三方库代替外部命令</li>
</ol>
</blockquote>
<h4 id="阻塞导致高延迟">阻塞导致高延迟</h4>
<h5 id="锁阻塞">锁阻塞</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">mtx</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">data</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;hint&#34;</span><span class="p">:</span> <span class="s">&#34;hello wold&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">(</span><span class="nx">wr</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mtx</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">mtx</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">buf</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">[</span><span class="s">&#34;hint&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">// 临界区内的慢操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wr</span><span class="p">.</span><span class="nf">Header</span><span class="p">()[</span><span class="s">&#34;Content-Type&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;application/json&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">io</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">wr</span><span class="p">,</span> <span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>减小临界区 - 优化后</strong>：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">mtx</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">data</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;hint&#34;</span><span class="p">:</span> <span class="s">&#34;hello wold&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">(</span><span class="nx">wr</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mtx</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">buf</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">[</span><span class="s">&#34;hint&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mtx</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">// 慢操作放置于临界区之外
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wr</span><span class="p">.</span><span class="nf">Header</span><span class="p">()[</span><span class="s">&#34;Content-Type&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;application/json&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">io</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">wr</span><span class="p">,</span> <span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在后端系统开发中，锁瓶颈是较常见的问题，例如文件锁
<figure>
</figure>
</p>
<ul>
<li>
<p><strong>双 Buffer 完全干掉锁阻塞</strong></p>
<blockquote>
<p>使用双 Buffer / RCU 完全消除读阻塞：全量更新，直接替换原 config</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">updateConfig</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">newConfig</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">MyConfig</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">WhiteList</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Do a lot of compulation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newConfig</span><span class="p">.</span><span class="nx">WhiteList</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="nx">newConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>使用双 Buffer / RCU 完全消除读阻塞：部分更新，先拷贝原 config，然后更新 key，最后替换</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// Partial update
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">updateConfig</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">oldConfig</span> <span class="p">=</span> <span class="nf">getConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">newConfig</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">MyConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">WhiteList</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Copy from old
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">k</span><span class="p">,</span><span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">oldConfig</span><span class="p">.</span><span class="nx">WhiteList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newConfig</span><span class="p">.</span><span class="nx">WhiteList</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="p">=</span> <span class="nx">v</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Modify some keys
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newConfig</span><span class="p">.</span><span class="nx">WhiteList</span><span class="p">[</span><span class="mi">123</span><span class="p">]</span> <span class="p">=</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newConfig</span><span class="p">.</span><span class="nx">WhiteList</span><span class="p">[</span><span class="mi">124</span><span class="p">]</span> <span class="p">=</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="nx">newConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>NOTE: 当更新可能并发时，则需要在更新时加锁</strong></p>
</li>
</ul>
<blockquote>
<p>优化锁阻塞瓶颈的手段总结:</p>
<ol>
<li>减小临界区：只锁必须锁的对象，临界区内尽量不放慢操作，如 <code>syscall</code></li>
<li>降低锁粒度：全局锁 -&gt; 对象锁，全局锁 -&gt; 连接锁， 连接锁 -&gt; 请求锁，文件锁 -&gt; 多个文件各种锁</li>
<li>同步改异步：同步日志 -&gt; 异步日志，若队列满则丢弃，不阻塞业务逻辑</li>
</ol>
</blockquote>
<h4 id="cpu-使用太高">CPU 使用太高</h4>
<h5 id="编解码使用-cpu-过高">编解码使用 CPU 过高</h5>
<p>通过更换 json 库，就可以提高系统的吞吐量：本质上是请求的 CPU 使用被优化了（可使用固定 QPS 压测来验证）</p>
<blockquote>
<p><code>encoding/json</code> &ndash;&raquo; <code>json &quot;github.com/json-iterator/go&quot;</code></p>
</blockquote>
<h5 id="gc-使用-cpu-过高">GC 使用 CPU 过高</h5>
<ul>
<li>将变化较少的结构放在堆外，通过 cgo 来管理内存，让 GC 发现不了这些对象，也就不会扫描了</li>
<li><a href="https://github.com/glycerine/offheap" target="_blank" rel="noopener noreffer "><strong>offheap</strong></a>，可以减少 Go 进程的内存占用和内存使用波动，但要用到 cgo</li>
</ul>
<p><a href="https://dgraph.io/blog/post/manual-memory-management-golang-jemalloc/" target="_blank" rel="noopener noreffer ">Manual Memory Management in Go using jemalloc</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkMapWithoutPtrs</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">m</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">m</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkMapWithPtrs</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">m</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">*</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">v</span> <span class="p">=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">			<span class="nx">m</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">v</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ got -bench . -benchmem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">BenchmarkMapWithoutPtrs-16       <span class="m">3362536</span>               412.1 ns/op           <span class="m">292</span> B/op          <span class="m">1</span> allocs/op
</span></span><span class="line"><span class="cl">BenchmarkMapWithPtrs-16          <span class="m">2580622</span>               524.8 ns/op           <span class="m">371</span> B/op         <span class="m">11</span> allocs/op
</span></span></code></pre></td></tr></table>
</div>
</div><p>结论: 当 map 中含有大量的指针 key 时，会给 GC 扫描造成压力</p>
<p>解决方案（<strong>只适用于内存不紧张，且希望提高整体吞吐量的服务</strong>）：</p>
<ul>
<li>调大 GOGC</li>
<li>程序启动阶段 make 一个全局超大的 slice（如1GB）<em>TODO 如何解决的？</em></li>
</ul>
<h4 id="内存占用过高">内存占用过高</h4>
<h5 id="堆分配导致内存占用过高">堆分配导致内存占用过高</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">max</span> <span class="p">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">14</span>
</span></span><span class="line"><span class="cl"><span class="c1">//go:noinline
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Steal</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">buf</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">max</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">buf</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">buf</span><span class="p">,</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkSteal</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Steal</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ go <span class="nb">test</span> -bench . -benchmem
</span></span><span class="line"><span class="cl">BenchmarkSteal-16              <span class="m">1</span>        <span class="m">1386661490</span> ns/op        <span class="m">10764864792</span> B/op              <span class="m">51</span> allocs/op
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="goroutine-数量太多导致内存占用过高">Goroutine 数量太多导致内存占用过高</h5>
<p><strong>Goroutine 涉及到的占用内存可能如下</strong>：</p>
<ol>
<li>
<p>Goroutine 栈占用的内存(<strong>难优化</strong>，一条 TCP 连接至少对应一个 Goroutine)</p>
</li>
<li>
<p>TCP Read Buffer 占用的内存(<strong>难优化</strong>，因为大部分连接阻塞在 Read 上，Read Buffer 基本没有可以释放的时机)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">l</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Accept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">buf</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">4096</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">c</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>TCP Writer Buffer 占用的内存(<strong>易优化</strong>，因为活跃连接不多)</p>
</li>
</ol>
<blockquote>
<p>原因：</p>
<ol>
<li><code>gopark(...)</code> 的 Goroutine， 占用内存</li>
<li>阻塞的 Read Buffer 很难找到时机释放，占用内存</li>
</ol>
</blockquote>
<p><strong>Solution</strong>: 在一些不太重视延迟的场景中（例如推送系统），可以使用某些库进行优化：evio、gev、gnet、easygo、gaio、netpoll</p>
<blockquote>
<p>NOTE: <strong>一定要进行在真实业务场景中做压测</strong>，不要相信某些库的 README 中的压测数据</p>
</blockquote>
<h4 id="常见优化场景总结">常见优化场景总结</h4>
<ol>
<li>CPU 使用太高
<ul>
<li>应用逻辑导致
<ul>
<li>JSON 序列化
<ul>
<li>使用一些优化的 JSON 库替代标准库</li>
<li>使用二进制编码方式代替 JSON 编码</li>
<li>同物理节点通信，使用共享内存 IPC，直接干掉序列化开销</li>
</ul>
</li>
<li>MD5 计算 HASH 值成本太高 &ndash;&gt; 使用 <a href="https://github.com/google/cityhash" target="_blank" rel="noopener noreffer ">cityhash</a>, <a href="https://zh.wikipedia.org/zh-cn/Murmur%E5%93%88%E5%B8%8C" target="_blank" rel="noopener noreffer ">murmurhash</a></li>
<li>其他应用逻辑：只能具体情况具体分析</li>
</ul>
</li>
<li>GC 使用 CPU 过高
<ul>
<li>减少堆上对象分配
<ul>
<li><code>sync.Pool</code> 进行堆对象重用</li>
<li><code>Map</code> -&gt; <code>slice</code></li>
<li>指针 -&gt; 非指针对象</li>
<li>多个小对象 -&gt; 合并为一个大对象</li>
</ul>
</li>
<li>offheap</li>
<li>降低 GC 频率
<ul>
<li>修改 GOGC</li>
<li>在程序开始时 <code>make</code> 一个全局大 <code>slice</code></li>
</ul>
</li>
</ul>
</li>
<li>调度相关的函数使用 CPU 过高
<ul>
<li>尝试使用 Goroutine Pool，减少 Goroutine 的创建与销毁</li>
<li>控制最大 Goroutine 数量</li>
</ul>
</li>
</ul>
</li>
<li>内存使用过高
<ul>
<li>堆内存占用内存空间过高
<ul>
<li><code>sync.Pool</code> 对象复用</li>
<li>为不同大小的对象提供不同大小 level 的 <code>sync.Pool</code></li>
<li>offheap</li>
</ul>
</li>
<li>Goroutine 栈占用过多内存
<ul>
<li>减少 Goroutine 数量
<ul>
<li>如每个连接一读一写 &ndash;&raquo; 合并为一个连接一个 goroutine</li>
<li>Goroutine pool 限制最大 goroutine 数量</li>
<li>使用裸 epoll 库(evio, gev等)修改网络编程方式（只适用于对延迟不敏感的业务）</li>
</ul>
</li>
<li>通过修改代码，减少函数调用层级（难）</li>
</ul>
</li>
</ul>
</li>
<li>阻塞问题
<ul>
<li>上游系统阻塞
<ul>
<li>让上游赶紧解决</li>
</ul>
</li>
<li>锁阻塞
<ul>
<li>减少临界区范围</li>
<li>降低锁粒度
<ul>
<li>Global Lock &ndash;&raquo; Shareded Lock</li>
<li>Global Lock &ndash;&raquo; Connection Level Lock</li>
<li>Connection Level Lock &ndash;&raquo; Request Level Lock</li>
</ul>
</li>
<li>同步改异步
<ul>
<li>日志场景：同步日志 &ndash;&raquo; 异步日志</li>
<li>Metrics 上报场景：<code>select</code> &ndash;&raquo; <code>select</code> + <code>default</code></li>
</ul>
</li>
<li>个别场景使用双 Buffer 完全消灭阻塞</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="iii-coutinuous-profiling">III. Coutinuous Profiling</h2>
<p>压测是一个蹲点行为，然而真实场景并不美好，它们通常是难以发现的偶发问题：</p>
<ul>
<li>该到吃饭的时候，CPU 使用尖刺</li>
<li>凌晨四点半，系统发生 OOM</li>
<li>刚睡着的时候，Goroutine 数量爆炸</li>
<li>产品被部署到客户那里，想登陆客户的环境并不方便</li>
</ul>
<p>此时 Coutinuout Profiling 就派上用场了.</p>
<figure>
</figure>

<p><strong>自省式的 Profile Dumper</strong>，可以根据 CPU 利用率、Memory 利用率、Goroutine 数量等多个指标检测系统，设置定时周期进行检测，当发现某个指标异常时，自动 Dump file.</p>
<hr>
<h2 id="iv-summary">IV. Summary</h2>
<ol>
<li>
<p><code>_pad</code> 优化，针对<strong>多个线程更新同一个结构体内不同的字段</strong>场景有效，而针对<strong>一个线程同时更新整个结构体</strong>的场景意义不大；</p>
</li>
<li>
<p>第三方接口出现问题，如何保护自己的服务？</p>
<blockquote>
<p>对外部调用必须有超时 ==&gt; 熔断</p>
</blockquote>
</li>
<li>
<p>goroutine 初始化栈空间为 2KB，最大 1GB，那么 heap 为什么不爆栈？</p>
<blockquote>
<p>在 Go 语言中，goroutine 和 heap 使用单独的内存空间：Goroutine 有自己的堆栈空间，用于存储局部变量、函数帧和其他运行时信息；heap 则是一个共享内存空间，用于存储动态分配的对象，例如 slice、map 和 strings。</p>
<p>当 Goroutine 需要分配的内存多于起堆栈上的可用内存时，它将自动从 stack 中分配内存，采用的是 stack 分配机制完成，运行 goroutine 分配任何数量的内存，而不用担心 stack 空间耗尽；
除了堆分配之外，goroutine 还可以使用一种称为堆栈复制的技术来在它们之间共享数据，堆栈复制比堆分配更有效，但它只能用于共享足够小以适合堆栈的数据。</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="v-reference">V. Reference</h2>
<ul>
<li><a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/go-gpp.html" target="_blank" rel="noopener noreffer ">Benchmarks Game</a></li>
<li><a href="https://github.com/smallnest/go-web-framework-benchmark" target="_blank" rel="noopener noreffer ">Go Web Frame Benchmarks</a></li>
<li><a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="noopener noreffer ">Go HTTP Router Benchmark</a></li>
<li><a href="https://www.techempower.com/benchmarks/" target="_blank" rel="noopener noreffer ">Web 场景跨语言性能对比</a></li>
<li>《Systems Performance》</li>
<li><a href="https://dave.cheney.net/high-performance-go-workshop/dotgo-paris.html" target="_blank" rel="noopener noreffer ">Dave 分享的 High Performance Go Workshop</a></li>
<li><a href="https://github.com/dgryski/go-perfbook" target="_blank" rel="noopener noreffer ">go-perfbook: best practices for writing high-performance Go code</a></li>
<li><a href="https://github.com/go-delve/delve/tree/master/Documentation" target="_blank" rel="noopener noreffer ">Delve</a></li>
<li><a href="https://www.opsian.com/blog/what-is-continuous-profiling" target="_blank" rel="noopener noreffer ">What is Continuous Profiling?</a></li>
<li><a href="https://research.google/pubs/google-wide-profiling-a-continuous-profiling-infrastructure-for-data-centers/" target="_blank" rel="noopener noreffer ">Google-Wide Profiling: A Continuous Profiling Infrastructure for Data Centers</a></li>
</ul>]]></description>
</item>
<item>
    <title>深入解读 Golang 常用 Linter 工具及最佳实践</title>
    <link>https://kydance.github.io/posts/linter-go/</link>
    <pubDate>Fri, 19 Apr 2024 11:24:23 &#43;0800</pubDate>
    <author>Kyden</author>
    <guid>https://kydance.github.io/posts/linter-go/</guid>
    <description><![CDATA[<p>在 Golang 生态系统中，Linter 工具是开发者提升代码质量的关键。
本文将深入介绍几款常用的 Linter 工具及其最佳实践，帮助您在开发中避免常见错误并提高代码的可维护性。</p>
<h2 id="目录">目录</h2>
<ul>
<li><a href="#o-%e8%af%b4%e6%98%8e" rel="">说明</a></li>
<li><a href="#i-%e4%bd%95%e4%b8%ba-linter" rel="">何为 Linter？</a></li>
<li><a href="#ii-gocyclo" rel="">Gocyclo</a></li>
<li><a href="#iii-bodyclose" rel="">bodyclose</a></li>
<li><a href="#iv-sqlrows" rel="">sqlrows</a></li>
<li><a href="#v-funlen" rel="">funlen</a></li>
<li><a href="#vi-goconst" rel="">goconst</a></li>
<li><a href="#vii-ineffassign" rel="">ineffassign</a></li>
<li><a href="#viii-lll" rel="">lll</a></li>
<li><a href="#ix-errcheck" rel="">errcheck</a></li>
<li><a href="#x-whitespace" rel="">whitespace</a></li>
<li><a href="#xi-golangci-lint" rel=""><strong>GolangCI-Lint</strong></a></li>
<li><a href="#xii-reviewdog" rel="">reviewdog</a></li>
<li><a href="#xiii-summary" rel="">Summary</a></li>
<li><a href="#xiv-reference" rel="">Reference</a></li>
</ul>
<h2 id="o-说明">O. 说明</h2>
<ul>
<li>如特殊说明，文中代码已在在 Mac 和 Linux 系统下进行测试</li>
</ul>
<h2 id="i-何为-linter">I. 何为 Linter？</h2>
<p>Linter 是一种静态代码分析工具，用于在编译前检查代码中的错误、风格问题及潜在的 Bug。
在 Golang 生态中，Linter 工具帮助开发者在早期阶段就发现问题，从而避免后期修复的高成本。</p>
<hr>
<h2 id="ii-gocyclo">II. Gocyclo</h2>
<p>Gocyclo 是一款用于分析 Go 代码中函数圈复杂度的 Linter 工具，帮助开发者识别需要重构的复杂函数。
通过降低圈复杂度，代码变得更加简洁、易读且更易维护。</p>
<h3 id="函数圈复杂度cyclomatic-complexities">函数圈复杂度(cyclomatic complexities)</h3>
<p>圈复杂度，是一种衡量代码复杂性的指标，通过计算代码中的决策点（如if语句、循环等）来评估函数的复杂度，具体计算方法如下：</p>
<ul>
<li>一个函数的基本圈复杂度为 <code>1</code></li>
<li>当函数中存在的每一个 <code>if</code>, <code>for</code>, <code>case</code>, <code>&amp;&amp;</code> or <code>||</code>，都会使得该函数的圈复杂度加 <code>1</code></li>
</ul>
<blockquote>
<ol>
<li>在 Go 语言中，由于 <code>if err != nil</code> 的特殊情况存在，因此，其圈复杂度阈值默认为 15，而其他编程语言中圈复杂度阈值一般默认为 10。</li>
<li>在 Go 语言中，<code>switch</code> 中的 <code>default</code> 并不会增加函数的圈复杂度；</li>
</ol>
</blockquote>
<p>Gocyclo 可以作为单独的命令行工具使用，也可以与其他 Linter 工具(如 golangci-lint)集成使用，提供更全面的代码质量检查。
同时，它也可以集成到 CI/CD 流程中，帮助团队持续改善代码质量。</p>
<h3 id="安装">安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何使用-gocyclo-linter-">如何使用 Gocyclo linter ？</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">Calculate cyclomatic complexities of Go functions.
</span></span><span class="line"><span class="cl">Usage:
</span></span><span class="line"><span class="cl">    gocyclo <span class="o">[</span>flags<span class="o">]</span> &lt;Go file or directory&gt; ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Flags:
</span></span><span class="line"><span class="cl">    -over N               show functions with complexity &gt; N only and
</span></span><span class="line"><span class="cl">                          <span class="k">return</span> <span class="nb">exit</span> code <span class="m">1</span> <span class="k">if</span> the <span class="nb">set</span> is non-empty
</span></span><span class="line"><span class="cl">    -top N                show the top N most complex functions only
</span></span><span class="line"><span class="cl">    -avg, -avg-short      show the average complexity over all functions<span class="p">;</span>
</span></span><span class="line"><span class="cl">                          the short option prints the value without a label
</span></span><span class="line"><span class="cl">    -ignore REGEX         exclude files matching the given regular expression
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The output fields <span class="k">for</span> each line are:
</span></span><span class="line"><span class="cl">&lt;complexity&gt; &lt;package&gt; &lt;<span class="k">function</span>&gt; &lt;file:line:column&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="使用示例">使用示例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// gocyclo-test/main.go 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;strconv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">a</span> <span class="o">==</span> <span class="mi">10</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">f</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="nx">a</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="mi">10</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;default&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="o">:=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">    <span class="nx">b</span> <span class="o">:=</span> <span class="mi">12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">a</span> <span class="o">!=</span> <span class="nx">b</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;a != b&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ gocyclo gocyclo-test/main.go 
</span></span><span class="line"><span class="cl"><span class="m">3</span> main main gocyclo-test/main.go:8:1
</span></span><span class="line"><span class="cl"><span class="m">2</span> main f gocyclo-test/main.go:24:1
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="iii-bodyclose">III. bodyclose</h2>
<p>在 Go 中，即使读取了所有的响应内容，也需要显式关闭响应体以释放资源，否则可能导致资源泄漏、连接池耗尽，进而影响应用性能。</p>
<p><code>bodyclose</code> 主要关注于 HTTP 响应体的正确关闭，通过检查 <code>resp.Body</code> 是否被正确关闭。
它既可以单独使用，也可以集成到其他 linter 工具（例如 golangci-lint）中。</p>
<h3 id="安装-1">安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">go install github.com/timakin/bodyclose@latest
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何使用-bodyclose-">如何使用 bodyclose ?</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ bodyclose
</span></span><span class="line"><span class="cl">bodyclose is a tool <span class="k">for</span> static analysis of Go programs.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Usage of bodyclose:
</span></span><span class="line"><span class="cl">	bodyclose unit.cfg	<span class="c1"># execute analysis specified by config file</span>
</span></span><span class="line"><span class="cl">	bodyclose <span class="nb">help</span>    	<span class="c1"># general help, including listing analyzers and flags</span>
</span></span><span class="line"><span class="cl">	bodyclose <span class="nb">help</span> name	<span class="c1"># help on specific analyzer and its flags</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="使用示例-1">使用示例</h4>
<p>这里展示借助 <code>golangci-lint</code> 的方式使用 <code>bodyclose</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">kyden</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;io&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="kt">error</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;http://example.com/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// defer resp.Body.Close() // &lt;&lt;&lt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ golangci-lint run --disable-all -E bodyclose main.go
</span></span><span class="line"><span class="cl">main.go:11:26: response body must be closed <span class="o">(</span>bodyclose<span class="o">)</span>
</span></span><span class="line"><span class="cl">    resp, err :<span class="o">=</span> http.Get<span class="o">(</span><span class="s2">&#34;http://example.com/&#34;</span><span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>避免使用 <code>http</code> 库中 <code>body</code> 忘记 <code>close</code> 的更优方案是:</p>
<p><strong>对 Go 官方提供的 <code>http</code> 进行封装，使调用方（Caller）不用显示调用 <code>close</code> 函数.</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">httpclient</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Client 是一个自定义的 HTTP 客户端结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Client</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">http</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Get 封装了 http.Get 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Client</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 确保在函数返回时关闭响应体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 读取响应内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">body</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">body</span><span class="p">),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<hr>
<h2 id="iv-sqlrows">IV. sqlrows</h2>
<p>在 Go 的 <code>database/sql</code> 包中，<code>sql.Rows</code> 是一个 <code>struct</code>，用于表示从数据库查询中返回的多行结果。</p>
<p>它提供了一组方法，允许开发者逐行读取查询结果。</p>
<ul>
<li>迭代结果：使用 <code>Next()</code> 方法逐行遍历结果集。</li>
<li>扫描数据：使用 <code>Scan()</code> 方法将当前行的列值复制到指定的变量中。</li>
<li>关闭结果集：使用 <code>Close()</code> 方法释放与结果集相关的资源。</li>
</ul>
<p><code>sqlrows</code> 的<a href="https://github.com/gostaticanalysis/sqlrows" target="_blank" rel="noopener noreffer ">官方介绍</a>：
<code>sqlrows</code> is a static code analyzer which helps uncover bugs by reporting a diagnostic for mistakes of <code>sql.Rows</code> usage.</p>
<h3 id="安装-2">安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">go install github.com/gostaticanalysis/sqlrows@latest
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何使用-sqlrows-">如何使用 sqlrows ?</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ sqlrows
</span></span><span class="line"><span class="cl">sqlrows is a tool <span class="k">for</span> static analysis of Go programs.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Usage of sqlrows:
</span></span><span class="line"><span class="cl">	sqlrows unit.cfg	<span class="c1"># execute analysis specified by config file</span>
</span></span><span class="line"><span class="cl">	sqlrows <span class="nb">help</span>    	<span class="c1"># general help</span>
</span></span><span class="line"><span class="cl">	sqlrows <span class="nb">help</span> name	<span class="c1"># help on specific analyzer and its flags</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Go 源码【注意 Not Good(NG) 处】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Go" data-lang="Go"><span class="line"><span class="cl"><span class="c1">// main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">kyden</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;database/sql&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">QueryContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;SELECT * FROM users&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span> <span class="c1">// NG: using rows before checking for errors
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// defer rows.Close() // NG: this return will not release a connection.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>针对两种 NG 的不同输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">go vet -vettool<span class="o">=</span><span class="k">$(</span>which sqlrows<span class="k">)</span> main.go
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:10:11: using rows before checking <span class="k">for</span> errors
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">go vet -vettool<span class="o">=</span><span class="k">$(</span>which sqlrows<span class="k">)</span> main.go
</span></span><span class="line"><span class="cl"><span class="c1"># command-line-arguments</span>
</span></span><span class="line"><span class="cl">./main.go:9:33: rows.Close must be called
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="v-funlen">V. funlen</h2>
<p><code>funlen</code>，用于检查函数的长度，确保函数的可读性和可维护性。
默认情况下，funlen 将函数的最大行数限制(<code>lines</code>)为 60 行，最大语句数(<code>statements</code>)限制为 40 条。</p>
<p>通常，funlen 会结合 golangci-lint 使用， 并集成到开发工作流中，提升代码质量.</p>
<h3 id="安装-3">安装</h3>
<p>funlen 可以通过 golangci-lint 安装: <code>go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest</code></p>
<h3 id="如何使用-funlen-">如何使用 funlen ？</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">funlen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters-settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">funlen</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lines</span><span class="p">:</span><span class="w"> </span><span class="m">60</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">statements</span><span class="p">:</span><span class="w"> </span><span class="m">40</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="使用示例-2">使用示例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">f</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Test funlen&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="o">:=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">b</span> <span class="o">:=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">c</span> <span class="o">:=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面的 <code>.golangci.yml</code> 仅用于展示 funlen 的用法，具体参数请根据实际项目自行调整。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="c"># .golangci.yml </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">funlen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters-settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">funlen</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lines</span><span class="p">:</span><span class="w"> </span><span class="m">6</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">statements</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ golangci-lint run
</span></span><span class="line"><span class="cl">main.go:12: Function <span class="s1">&#39;f&#39;</span> has too many statements <span class="o">(</span><span class="m">7</span> &gt; 4<span class="o">)</span> <span class="o">(</span>funlen<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="vi-goconst">VI. goconst</h2>
<p>goconst 会扫描代码，识别出在多个地方重复出现的字符串。
这些字符串通常是相同的文本，开发者通过将重复的字符串提取为常量，代码变得更加清晰，减少了硬编码的出现，降低了出错的可能性。
可以根据项目需求自定义 goconst 的行为，例如设置字符串的最小长度、最小出现次数等。</p>
<p>goconst 通常作为 golangci-lint 的一部分使用。</p>
<h3 id="如何使用-goconst-">如何使用 goconst ?</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">goconst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters-settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">goconst</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min-len</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min-occurrences</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="使用示例-3">使用示例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="o">:=</span> <span class="s">&#34;Hello&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">b</span> <span class="o">:=</span> <span class="s">&#34;Hello&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">c</span> <span class="o">:=</span> <span class="s">&#34;Hello&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面的 <code>.golangci.yml</code> 仅用于展示 funlen 的用法，具体参数请根据实际项目自行调整。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="c"># .golangci.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">goconst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters-settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">goconst</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min-len</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min-occurrences</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ golangci-lint run
</span></span><span class="line"><span class="cl">main.go:7:10: string <span class="sb">`</span>Hello<span class="sb">`</span> has <span class="m">3</span> occurrences, make it a constant <span class="o">(</span>goconst<span class="o">)</span>
</span></span><span class="line"><span class="cl">    a :<span class="o">=</span> <span class="s2">&#34;Hello&#34;</span>
</span></span><span class="line"><span class="cl">         ^
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="vii-ineffassign">VII. ineffassign</h2>
<p>ineffassign，主要用于检测代码中对现有变量的赋值操作是否未被使用。
这种未使用的赋值通常是代码中的潜在错误，可能导致逻辑上的混乱或资源的浪费。</p>
<h3 id="如何使用-ineffassign-">如何使用 ineffassign ?</h3>
<p>通常作为 golangci-lint 的一部分使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">ineffassign</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="使用示例-4">使用示例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="o">:=</span> <span class="s">&#34;Hello&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Not assign a value to `a`
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="p">=</span> <span class="s">&#34;kyden&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ golangci-lint run
</span></span><span class="line"><span class="cl">main.go:7:5: ineffectual assignment to a <span class="o">(</span>ineffassign<span class="o">)</span>
</span></span><span class="line"><span class="cl">    a :<span class="o">=</span> <span class="s2">&#34;Hello&#34;</span>
</span></span><span class="line"><span class="cl">    ^
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="viii-lll">VIII. lll</h2>
<p>通过限制行的长度，lll 有助于确保代码在查看时不会横向滚动，提升代码的可读性。</p>
<p>lll，主要用于检查代码行的长度，检查每一行的长度是否超过指定的最大值。
默认情况下，lll 将最大行长度限制为 120 个字符。</p>
<h3 id="如何使用-lll-">如何使用 lll ?</h3>
<p>lll 通常作为 golangci-lint 的一部分使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">lll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters-settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">lll</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">line-length</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="使用示例-5">使用示例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">kyden</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="o">:=</span> <span class="s">&#34;This is a very long line that exceeds the maximum line length set by the linter and should be broken up into smaller, more manageable lines.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">golangci-lint run
</span></span><span class="line"><span class="cl">main.go:5: the line is <span class="m">151</span> characters long, which exceeds the maximum of <span class="m">80</span> characters. <span class="o">(</span>lll<span class="o">)</span>
</span></span><span class="line"><span class="cl">    a :<span class="o">=</span> <span class="s2">&#34;This is a very long line that exceeds the maximum line length set by the linter and should be broken up into smaller, more manageable lines.&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>解决方案</p>
<p>使用反引号（`）定义多行字符串，允许字符串跨越多行而不需要使用连接符</p>
</blockquote>
<hr>
<h2 id="ix-errcheck">IX. errcheck</h2>
<p>errcheck，专门检查未处理的错误，确保开发者在调用可能返回错误的函数时，正确地检查和处理这些错误，从而提高代码的健壮性和可靠性。</p>
<ul>
<li><code>errcheck</code> 会扫描 Go 代码，查找未检查错误的地方</li>
<li>除了检查函数返回的错误,还可以检查类型断言是否被忽略</li>
<li>可以检查是否将错误赋值给了空白标识符</li>
</ul>
<h3 id="如何使用-">如何使用 ?</h3>
<p><code>errcheck</code> 通常作为 golangci-lint 的一部分使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">linters-settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">errcheck</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">check-type-assertions</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 检查类型断言是否被忽略,默认为 false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">check-blank</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 检查是否将错误赋值给空白标识符,默认为 false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">disable-default-exclusions</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># 禁用默认的忽略函数列表,默认为 false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">exclude-functions</span><span class="p">:</span><span class="w">  </span><span class="c"># 指定要忽略检查的函数列表</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># ...</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="使用示例-6">使用示例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">hello</span><span class="p">(</span><span class="s">&#34;Kyden&#34;</span><span class="p">)</span> <span class="c1">// err Not Check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nx">_</span> <span class="p">=</span> <span class="nf">hello</span><span class="p">(</span><span class="s">&#34;Kyden&#34;</span><span class="p">)</span> <span class="c1">// err assign to _
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nf">hello</span><span class="p">(</span><span class="s">&#34;Go&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">hello</span><span class="p">(</span><span class="nx">str</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Hello, %s&#34;</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面的 <code>.golangci.yml</code> 仅用于展示 errcheck 的用法，具体参数请根据实际项目自行调整。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="c"># .golangci.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">errcheck</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters-settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">errcheck</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">check-type-assertions</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">check-blank</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">golangci-lint run
</span></span><span class="line"><span class="cl">main.go:9:10: Error <span class="k">return</span> value is not checked <span class="o">(</span>errcheck<span class="o">)</span>
</span></span><span class="line"><span class="cl">    hello<span class="o">(</span><span class="s2">&#34;Kyden&#34;</span><span class="o">)</span> // err Not Check
</span></span><span class="line"><span class="cl">         ^
</span></span><span class="line"><span class="cl">main.go:11:5: Error <span class="k">return</span> value is not checked <span class="o">(</span>errcheck<span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">_</span> <span class="o">=</span> hello<span class="o">(</span><span class="s2">&#34;Kyden&#34;</span><span class="o">)</span> // err assign to _
</span></span><span class="line"><span class="cl">    ^
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="x-whitespace">X. whitespace</h2>
<p><code>whitespace</code> 是一个 Go 语言的 linter，主要用于检查代码中不必要的空行，即检查函数、条件语句（如 <code>if</code>、<code>for</code>）等开头和结尾的多余空行。</p>
<h3 id="如何使用-whitespace-">如何使用 whitespace ?</h3>
<p><code>whitespace</code> 也包含在 golangci-lint 中，只需在配置中启用即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">whitespace</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="使用示例-7">使用示例</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nf">hello</span><span class="p">(</span><span class="s">&#34;Kyden&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">hello</span><span class="p">(</span><span class="nx">str</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;str len &lt;= 0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Hello, %s&#34;</span><span class="p">,</span> <span class="nx">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">$ gosrc golangci-lint run
</span></span><span class="line"><span class="cl">main.go:15:31: unnecessary leading newline <span class="o">(</span>whitespace<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">^
</span></span><span class="line"><span class="cl">main.go:25:1: unnecessary trailing newline <span class="o">(</span>whitespace<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">^
</span></span><span class="line"><span class="cl">main.go:17:23: unnecessary leading newline <span class="o">(</span>whitespace<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">^
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="xi-golangci-lint">XI. GolangCI-Lint</h2>
<blockquote>
<p><strong>生产级静态分析工具</strong></p>
<p><a href="https://golangci-lint.run/" target="_blank" rel="noopener noreffer "><code>golangci-lint</code> is a fast Go linters runner. It runs linters in parallel, uses caching, supports YAML configuration, integrates with all major IDEs, and includes over a hundred linters.</a></p>
</blockquote>
<p><code>golangci-lint</code> 是一款快速的 Go 语言 linter，它并行运行多个 linter 程序，使用缓存，支持 YAML 配置，与所有主流集成开发环境集成，并包含一百多个 linter 程序。</p>
<h3 id="安装-4">安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Verify</span>
</span></span><span class="line"><span class="cl">golangci-lint --version
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何使用-golangci-lint-">如何使用 golangci-lint ?</h3>
<p>在不进行任何配置的情况下，GolangCI-Lint 将默认采用启动以下 Linters:
<code>errcheck</code>, <code>gosimple</code>, <code>govet</code>, <code>ineffassign</code>, <code>staticcheck</code>, <code>unused</code>.</p>
<p>也可以通过传递 <code>-E</code>(<code>--enable</code>) 参数来启动 Linter，传递 <code>-D</code>(<code>--disable</code>) 来禁用 Linter.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">golangci-lint run --disable-all -E errcheck
</span></span></code></pre></td></tr></table>
</div>
</div><figure>
</figure>

<h3 id="visual-studio-code-集成">Visual Studio Code 集成</h3>
<p>由于个人一直使用 VSCode 开发各种程序，这里只展示其如何集成 GolangCI-Lint。</p>
<p>Step 1. <strong><code>settings.json</code> 启用 golangci-lint</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;go.lintTool&#34;</span><span class="err">:</span> <span class="s2">&#34;golangci-lint&#34;</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;go.lintFlags&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;--fast&#34;</span> <span class="c1">// Using it in an editor without --fast can freeze your editor.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>Step 2. 配置 <code>.golangci.yml</code></p>
<p>当使用 Golangci-lint 时，它会自动在编辑的 Go 文件所在的目录或父目录中查找 <code>.golangci.yml</code> 配置文件。
如果找到了配置文件，Golangci-lint 就会根据该配置文件的设置来运行 linter。</p>
<p>因此，在 VS Code 的设置中，不需要专门配置 Golangci-lint。
<strong>只需要在项目根目录或相应的目录下创建 <code>.golangci.yml</code> 配置文件，并在其中指定需要启用的 linter 和相关选项即可</strong>。</p>
<hr>
<p>Step 3. <strong>Enjoy your coding time 🥂</strong></p>
<hr>
<blockquote>
<p><a href="https://golangci-lint.run/welcome/integrations/" target="_blank" rel="noopener noreffer ">Golangci-lint 同样支持 GoLang、NeoVim 等流行 IDE 集成.</a></p>
</blockquote>
<h3 id="golangciyml-参考配置"><code>.golangci.yml</code> 参考配置</h3>
<p>这里给出一个个人在用的 golangci-lint 完整配置文件，以供参考：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">run</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="l">5m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">go</span><span class="p">:</span><span class="w"> </span><span class="m">1.21</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters-settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">funlen</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lines</span><span class="p">:</span><span class="w"> </span><span class="m">150</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">statements</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">goconst</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min-len</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min-occurrences</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">lll</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">line-length</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">govet</span><span class="p">:</span><span class="w">            </span><span class="c"># 对于linter govet，这里手动开启了它的某些扫描规则</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">shadow</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">check-unreachable</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">check-rangeloops</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">check-copylocks</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 启动nilness检测</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">nilness</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">disable-all</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enable</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">bodyclose</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">errcheck</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">funlen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">goconst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">gocyclo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">gofmt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">goimports</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">gosimple</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">govet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">ineffassign</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">lll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">misspell</span><span class="w"> </span><span class="c"># Go 静态分析工具，专注于检查代码中的拼写错误</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">nilerr</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">rowserrcheck</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">staticcheck</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">typecheck</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">unconvert</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">unparam</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">unused</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">whitespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">issues</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">skip-dirs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">test</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">exclude-files</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">_test.go</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更多详细信息，请参考<a href="https://golangci-lint.run/" target="_blank" rel="noopener noreffer ">官方文档</a></p>
<h2 id="xii-reviewdog">XII. reviewdog</h2>
<p>A code review dog who keeps your codebase healthy.</p>
<p><code>reviewdog</code> 是一个用于自动化代码审查的工具，旨在通过集成各种 linter 工具来简化代码质量检查。它能够将 lint 工具的输出结果作为评论发布到代码托管服务（如 GitHub、GitLab 等），从而提高代码审查的效率和准确性。</p>
<h3 id="功能">功能</h3>
<ul>
<li>自动发布评论：reviewdog 可以将 lint 工具的结果自动发布为评论，帮助开发者快速识别代码中的问题。</li>
<li>支持多种 linter：它支持多种静态分析工具，包括 golangci-lint、eslint、pylint 等，可以方便地集成到现有的开发流程中。</li>
<li>过滤输出：支持根据 diff 过滤 lint 工具的输出，只报告在当前变更中出现的问题。</li>
<li>多种报告模式：支持多种报告模式，如 GitHub PR 评论、GitHub Checks、GitLab 合并请求讨论等。</li>
<li>本地运行：除了在 CI/CD 环境中运行外，reviewdog 也可以在本地环境中使用，方便开发者在提交代码前进行检查。</li>
</ul>
<h3 id="安装-5">安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Install the latest version. (Install it into ./bin/ by default).</span>
</span></span><span class="line"><span class="cl">$ curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh <span class="p">|</span> sh -s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Specify installation directory ($(go env GOPATH)/bin/) and version.</span>
</span></span><span class="line"><span class="cl">$ curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh <span class="p">|</span> sh -s -- -b <span class="k">$(</span>go env GOPATH<span class="k">)</span>/bin <span class="o">[</span>vX.Y.Z<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># In alpine linux (as it does not come with curl by default)</span>
</span></span><span class="line"><span class="cl">$ wget -O - -q https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh <span class="p">|</span> sh -s <span class="o">[</span>vX.Y.Z<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>推荐使用第二种安装方式 <code>curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b $(go env GOPATH)/bin</code>，具体安装实例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh <span class="p">|</span> sh -s -- -b <span class="k">$(</span>go env GOPATH<span class="k">)</span>/bin
</span></span><span class="line"><span class="cl">reviewdog/reviewdog info checking GitHub <span class="k">for</span> latest tag
</span></span><span class="line"><span class="cl">reviewdog/reviewdog info found version: 0.20.1 <span class="k">for</span> v0.20.1/Darwin/arm64
</span></span><span class="line"><span class="cl">reviewdog/reviewdog info installed /Users/kyden/go/bin/reviewdog
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何使用-reviewdog-">如何使用 reviewdog ?</h3>
<h4 id="本地使用">本地使用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">golangci-lint run ./... 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> reviewdog -f<span class="o">=</span>golangci-lint -reporter<span class="o">=</span><span class="nb">local</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://github.com/reviewdog/reviewdog?tab=readme-ov-file#reporter-local--reporterlocal-default" target="_blank" rel="noopener noreffer ">官方示例</a></p>
</blockquote>
<h3 id="github-action">Github Action</h3>
<h4 id="1-创建-github-actions-工作流">1. 创建 GitHub Actions 工作流</h4>
<p>在项目根目录下创建一个 GitHub Actions 工作流文件，<code>.github/workflows/reviewdog.yml</code></p>
<h4 id="2-配置-golangciyml">2. 配置 .golangci.yml</h4>
<p>在项目根目录下创建一个 <code>.golangci.yml</code> 配置文件，配置需要启用的 linter</p>
<h4 id="3-提交代码">3. 提交代码</h4>
<p>当你提交代码并创建拉取请求时，GitHub Actions 会自动运行 reviewdog，并根据 lint 工具的输出在拉取请求中添加评论，指出代码中的问题。</p>
<blockquote>
<p><a href="https://github.com/reviewdog/reviewdog?tab=readme-ov-file#github-actions" target="_blank" rel="noopener noreffer ">更多内容请参考官方示例</a></p>
</blockquote>
<h2 id="xiii-summary">XIII. Summary</h2>
<p><strong>综上所述，Golang 生态中有众多优秀的 Linter 工具，它们能够有效地检查代码质量，提高项目的可维护性和可靠性。
开发者可以根据项目需求，选择合适的 Linter 工具，并将其集成到 CI/CD 流程中，持续改善代码质量。
未来，随着 Golang 社区的不断发展，相信会有更多优秀的 Linter 工具问世，为 Golang 开发者提供更加强大的代码分析能力。</strong></p>
<h2 id="xiv-reference">XIV. Reference</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank" rel="noopener noreffer ">Cyclomatic complexity</a></li>
<li><a href="https://github.com/fzipp/gocyclo" target="_blank" rel="noopener noreffer ">Gocyclo</a></li>
<li><a href="https://github.com/timakin/bodyclose" target="_blank" rel="noopener noreffer ">bodyclose</a></li>
<li><a href="https://github.com/gostaticanalysis/sqlrows" target="_blank" rel="noopener noreffer ">sqlrows</a></li>
<li><a href="https://github.com/golangci/golangci-lint" target="_blank" rel="noopener noreffer ">GolangCI-Lint</a></li>
<li><a href="https://github.com/analysis-tools-dev/static-analysis" target="_blank" rel="noopener noreffer ">static analysis</a></li>
<li><a href="https://github.com/reviewdog/reviewdog" target="_blank" rel="noopener noreffer ">reviewdog</a></li>
</ul>]]></description>
</item>
</channel>
</rss>

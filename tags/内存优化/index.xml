<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内存优化 - Tag  Kyden&#39;s 博客</title>
    <link>http://kyden.us.kg/tags/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</link>
    <description>Kyden&#39;s Blog Site</description>
    <generator>Hugo 0.143.1 &amp; FixIt v0.3.16</generator>
    <language>en</language>
    <managingEditor>kytedance@gmail.com (kyden)</managingEditor>
    <webMaster>kytedance@gmail.com (kyden)</webMaster>
    <lastBuildDate>Sun, 19 May 2024 22:47:26 +0800</lastBuildDate>
    <atom:link href="http://kyden.us.kg/tags/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 内存优化实战：逃逸分析完全指南</title>
      <link>http://kyden.us.kg/posts/golang-escape-analysis/</link>
      <pubDate>Sun, 19 May 2024 22:47:26 +0800</pubDate><author>kytedance@gmail.com (kyden)</author>
      <guid>http://kyden.us.kg/posts/golang-escape-analysis/</guid>
      <category domain="http://kyden.us.kg/categories/go%E8%AF%AD%E8%A8%80/">Go语言</category>
      <category domain="http://kyden.us.kg/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">性能优化</category>
      <category domain="http://kyden.us.kg/categories/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/">内存管理</category>
      <category domain="http://kyden.us.kg/categories/%E7%BC%96%E7%A8%8B%E5%8E%9F%E7%90%86/">编程原理</category>
      <category domain="http://kyden.us.kg/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/">最佳实践</category>
      <description>&lt;div class=&#34;details admonition abstract open&#34;&gt;&#xA;  &lt;div class=&#34;details-summary admonition-title&#34;&gt;&lt;i class=&#34;icon fa-fw fa-solid fa-clipboard-list&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;导语&lt;i class=&#34;details-icon fa-solid fa-angle-right fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;details-content&#34;&gt;&#xA;    &lt;div class=&#34;admonition-content&#34;&gt;在 Go 语言中，编译器通过逃逸分析来决定变量的内存分配位置，这直接影响着程序的性能和内存使用效率。但很多开发者对此知之甚少，导致代码中潜藏着性能隐患。本文将带你深入理解 Go 的逃逸分析机制，通过丰富的示例解析各种逃逸场景，帮助你掌握内存优化的关键技巧。从理论到实践，让你的 Go 程序更快、更高效。&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>

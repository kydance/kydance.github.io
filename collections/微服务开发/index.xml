<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务开发 - Collection  Kyden&#39;s 博客</title>
    <link>http://kydance.github.io/collections/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91/</link>
    <description>Kyden&#39;s Blog Site</description>
    <generator>Hugo 0.147.3 &amp; FixIt v0.3.19</generator>
    <language>en</language>
    <managingEditor>kytedance@gmail.com (kyden)</managingEditor>
    <webMaster>kytedance@gmail.com (kyden)</webMaster>
    <lastBuildDate>Sat, 01 Jun 2024 21:37:55 +0800</lastBuildDate>
    <atom:link href="http://kydance.github.io/collections/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解 Go Context：优雅的并发控制与请求管理</title>
      <link>http://kydance.github.io/posts/golang-context/</link>
      <pubDate>Sat, 01 Jun 2024 21:37:55 +0800</pubDate><author>kytedance@gmail.com (kyden)</author>
      <guid>http://kydance.github.io/posts/golang-context/</guid>
      <category domain="http://kydance.github.io/categories/go%E8%AF%AD%E8%A8%80/">Go语言</category>
      <category domain="http://kydance.github.io/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">并发编程</category>
      <category domain="http://kydance.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/">微服务</category>
      <category domain="http://kydance.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/">服务端开发</category>
      <category domain="http://kydance.github.io/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/">最佳实践</category>
      <description>&lt;div class=&#34;details admonition abstract open&#34;&gt;&#xA;  &lt;div class=&#34;details-summary admonition-title&#34;&gt;&lt;i class=&#34;icon fa-fw fa-solid fa-clipboard-list&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;导语&lt;i class=&#34;details-icon fa-solid fa-angle-right fa-fw&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;details-content&#34;&gt;&#xA;    &lt;div class=&#34;admonition-content&#34;&gt;在现代 Go 应用中，Context 是实现并发控制和请求管理的核心机制。它不仅能够优雅地传递请求上下文，还能有效管理 goroutine 的生命周期，实现超时控制和优雅退出。本文将带你深入理解 Context 的设计理念和最佳实践，通过实例讲解如何在实际项目中运用 Context 来构建可靠、高效的并发应用。从链路追踪到资源管理，一文掌握 Context 的精髓。&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
